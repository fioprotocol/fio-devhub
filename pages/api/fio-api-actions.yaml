swagger: '2.0'
info:
  title: FIO Protocol API
  version: '1.0'
  description: |-
    The FIO Protocol API documentation provides information on the FIO Protocol getters, actions, 
    and block producer actions.

    The **https://developers.fioprotocol.io/v1/chain** endpoint listed below is only accessible from the Dev Hub
    and should not be used for integration testing. 

    For a full list of public API Testnet and Mainnet nodes refer to: https://github.com/fioprotocol/fio.mainnet

    -
  license:
    name: MIT
  contact:
    url: 'http://fioprotocol.io'
    email: info@fioprotocol.io
    name: FIO
servers:
  - url: 'https://fiotestnet.blockpane.com/v1/chain'
    description: FIO Testnet server
  - url: 'https://fio.blockpane.com/v1/chain'
    description: FIO Mainnet server 
paths:
  /get_fio_balance:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              balance:
                type: integer
                description: Total SUF balance associated with supplied public key (includes locked and staked tokens).
                example: 100000000000
              available:
                type: integer
                description: Available SUF balance associated with supplied public key (does not include locked or staked tokens).
                example: 100000000000
              staked:
                type: integer
                description: SUFs staked by account associated with supplied public key.
                example: 100000000000
              srps:
                type: integer
                description: Amount of Staking Reward Points (SRPs) held by account associated with supplied public key.
                example: 100000000000
              roe:
                type: double
                description: Estimated Staking Reward Point (SRP) rate of exchaange. _srps_ x _roe_ will shows SUFs account will get on unstake. (_srps_ x _roe_) - _staked_ will show staking rewards accrued in SUFs. Please note, any calculation involving roe is an approximation.
                example: 1.243604281298789
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
        '404':
          description: |-
            Possible error messages:
            * "Public key not found"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: Public key not found
      summary: Get FIO balance
      description: Retrieves balance of FIO tokens. Also returns available balance which only includes tokens which are not locked.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
            required:
              - fio_public_key
      operationId: get_fio_balance
      tags:
        - Getters
  /get_fio_names:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              fio_domains:
                type: array
                items:
                  type: object
                  properties:
                    fio_domain:
                      type: string
                      title: FIO Domain
                      minLength: 1
                      maxLength: 62
                      pattern: '^[a-z0-9-]+$'
                    expiration:
                      type: string
                      format: date-time
                      title: Date/time
                    is_public:
                      type: integer
                      description: |-
                        * 0 - domain is not public
                        * 1 - domain is public
              fio_addresses:
                type: array
                items:
                  type: object
                  properties:
                    fio_address:
                      type: string
                      title: FIO Crypto Handle (aka FIO Address)
                      minLength: 3
                      maxLength: 64
                      pattern: >-
                        ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                    expiration:
                      type: string
                      format: date-time
                      title: Date/time
                    remaining_bundled_tx:
                      type: integer
                      title: Count of remaining bundled transactions.
          examples:
            application/json:
              fio_domains:
                - fio_domain: alice
                  expiration: '2020-09-11T18:30:56'
                  is_public: 0
              fio_addresses:
                - fio_address: purse@alice
                  expiration: '2020-09-11T18:30:56'
                  remaining_bundled_tx: 98
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
        '404':
          description: |-
            Possible error messages:
            * "No FIO names"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: No FIO names
      summary: Get all FIO Domains and Crypto Handles linked to public key
      description: Returns FIO Crypto Handles (aka FIO Addresses) and FIO Domains owned by a public key. This getter does not allow for paging through multiple results. Consider /get_fio_addresses or  /get_fio_domains instead.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
            required:
              - fio_public_key
      operationId: get_fio_names
      tags:
        - Getters
  /get_fio_addresses:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              fio_addresses:
                type: array
                items:
                  type: object
                  properties:
                    fio_address:
                      type: string
                      title: FIO Crypto Handle (aka FIO Address)
                      minLength: 3
                      maxLength: 64
                      pattern: >-
                        ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                      example: purse@alice
                    expiration:
                      type: string
                      format: date-time
                      title: Date/time
                      example: '2020-09-11T18:30:56'
                    remaining_bundled_tx:
                      type: integer
                      title: Count of remaining bundled transactions.
                      example: 98                   
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
                example: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
        '404':
          description: |-
            Possible error messages:
            * "No FIO Addresses"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: No FIO Addresses
      summary: Get FIO Crypto Handles linked to public key
      description: >-
        Returns FIO Crypto Handles (aka FIO Addresses) owned by this public key (supports paging). 
        See [FIP-2](https://github.com/fioprotocol/fips/blob/master/fip-0002.md) for a comprehensive description of this functionality.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              limit:
                type: integer
                description: >-
                  Number of requests to return. If omitted, all requests will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First request from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0                
            required:
              - fio_public_key
      operationId: get_fio_addresses
      tags:
        - Getters
  /get_fio_domains:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              fio_domains:
                type: array
                items:
                  type: object
                  properties:
                    fio_domain:
                      type: string
                      title: FIO Domain
                      minLength: 1
                      maxLength: 62
                      pattern: '^[a-z0-9-]+$'
                    expiration:
                      type: string
                      format: date-time
                      title: Date/time
                    is_public:
                      type: integer
                      description: |-
                        * 0 - domain is not public
                        * 1 - domain is public
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              fio_domains:
                - fio_domain: alice
                  expiration: '2020-09-11T18:30:56'
                  is_public: 0
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
        '404':
          description: |-
            Possible error messages:
            * "No FIO Domains"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: No FIO Domains
      summary: Get FIO Domains linked to public key
      description: >-
        Returns FIO Domains owned by this public key (supports paging). 
        See [FIP-2](https://github.com/fioprotocol/fips/blob/master/fip-0002.md) for a comprehensive description of this functionality.      
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              limit:
                type: integer
                description: >-
                  Number of requests to return. If omitted, all requests will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First request from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0                
            required:
              - fio_public_key
      operationId: get_fio_domains
      tags:
        - Getters
  /avail_check:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              is_registered:
                type: integer
                example: 1
                description: |-
                  * 1 - FIO Address or Domain is registered
                  * 0 - FIO Address or Domain is not registered
          examples:
            application/json:
              is_registered: 1
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Name"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_name
                  value: _.@
                  error: Invalid FIO Name
      summary: FIO Domain/Crypto Handle availability check
      description: Checks if a FIO Crypto Handle (aka FIO Address) or FIO Domain is available for registration.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - fio_name
            properties:
              fio_name:
                type: string
                description: FIO Crypto Handle (aka FIO Address) or FIO Domain to check.
                example: purse@alice
      operationId: avail_check
      tags:
        - Getters
  /get_pub_address:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              public_address:
                type: string
                description: Public address for requested FIO Crypto Handle (aka FIO Address) and token.
          examples:
            application/json:
              public_address: '0xab5801a7d398351b8be11c439e05c5b3259aec9b'
        '400':
          description: "Possible error messages:\n* \t\"Invalid FIO Address\"\n* \t\"Invalid Chain Code\"\n* \t\"Invalid Token Code\""
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: public_address
                  value: ''
                  error: Invalid public address format
        '404':
          description: |-
            Possible error messages:
            * "Public address not found"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: Public address not found
      summary: Get a public address mapped to FIO Crypto Handle
      description: >-
        Returns a public address for specified token code and FIO Crypto Handle (aka FIO Address).


        `get_pub_address` accepts chain-level public addresses ('*' as a chain_code).
        See [FIP-18](https://github.com/fioprotocol/fips/blob/master/fip-0018.md) for a description of 
        chain-level public address functionality.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - fio_address
              - chain_code
              - token_code
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              chain_code:
                type: string
                title: Token/chain code
                minLength: 1
                maxLength: 10
                pattern: '^[A-Z0-9]+$'
                example: FIO
              token_code:
                type: string
                title: Token/chain code
                minLength: 1
                maxLength: 10
                pattern: '^[A-Z0-9]+$'
                example: FIO
      operationId: get_pub_address
      tags:
        - Getters
  /get_pub_addresses:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              public_addresses:
                type: array
                uniqueItems: true
                description: >-
                  Array of public addresses mapped to the FIO Public Key.
                items:
                  type: object
                  properties:
                    chain_code:
                      type: string
                      title: Chain code
                      description: Chain code
                    token_code:
                      type: string
                      title: Token code
                      description: Token code
                    public_address:
                      type: object
                      title: Native Blockchain Public Address
                      description: Public address on another blockchain.
                example:
                  - chain_code: FIO
                    token_code: FIO
                    public_address: FIO6cp3eJMhtAuQvzetCAqcUAyLBabHj8M8hJD5nA8T1p7FoXaTd2
                  - chain_code: ETH
                    token_code: ETH
                    public_address: '0xab5801a7d398351b8be11c439e05c5b3259aec9b'
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Address"
            * "Invalid limit"
            * "Invalid offset"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: bob
                  error: Invalid FIO Address
        '404':
          description: |-
            Possible error messages:
            * "No FIO addresses are mapped"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: Public addresses not found
      summary: Get ALL public addresses mapped to a FIO Crypto Handle
      description: Returns all public addresses for specified FIO Crypto Handle (aka FIO Address).
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - fio_address
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                description: FIO Crypto Handle (aka FIO Address) of the payee.
                example: purse@alice
              limit:
                type: integer
                description: >-
                  Number of requests to return. If omitted, all requests will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First request from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
      operationId: get_pub_addresses
      tags:
        - Getters
  /get_sent_fio_requests:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              requests:
                type: array
                description: Multiple requests may be returned. All requests are returned.
                items:
                  type: object
                  properties:
                    fio_request_id:
                      type: integer
                      description: ID of the original request.
                    payer_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle (aka FIO Address) of the payer. This address initiated
                        payment.
                    payee_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle of the payee. This address is receiving
                        payment.
                    payer_fio_public_key:
                      type: string
                      description: FIO public key of the payer.
                    payee_fio_public_key:
                      type: string
                      description: FIO public key of the payee.
                    content:
                      type: object
                      title: FIO Request encrypted content
                      description: >-
                        Certain content inside FIO Request is encrypted and
                        packed into this field.


                        Min 64 characters

                        Max 296 characters
                      properties:
                        payee_public_address:
                          type: object
                          title: Native Blockchain Public Address
                          description: "This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.\n\n**Integrated Address**\nIf the blockchain supports it, an integrated address may be passed in just like standard public address. The FIO protocol does not perform validation on the passed string.\n\n**URI Scheme**\nFIO Protocol will support formatting of public addresses using URI were certain attributes are appended to the public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized parameters will be supported in official FIO Protocol SDKs.\n\n**Parameters**\n* dt - Ripple\n* memo - Any - use as generic memo field\n* memo_id -\tStellar\n* memo_text -\tStellar\n* memo_hash -\tStellar\n* memo_return -\tStellar\n* payment_id - Monero\n"
                        amount:
                          type: string
                          description: Amount requested.
                        token_code:
                          type: string
                          title: Token/chain code
                          minLength: 1
                          maxLength: 10
                          pattern: '^[A-Z0-9]+$'
                        memo:
                          type: string
                        hash:
                          type: string
                        offline_url:
                          type: string
                        future_use1:
                          type: string
                        future_use2:
                          type: string
                        future_use3:
                          type: string
                        future_use4:
                          type: string
                        future_use5:
                          type: string
                      required:
                        - payee_public_address
                        - amount
                        - token_code
                        - memo
                        - hash
                        - offline_url
                        - future_use1
                        - future_use2
                        - future_use3
                        - future_use4
                        - future_use5
                    time_stamp:
                      type: string
                      description: Timestamp of request
                    status:
                      type: string
                      title: FIO Request status
                      description: Status of FIO Request
                      enum:
                        - requested
                        - sent_to_blockchain
                        - rejected
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              requests:
                - fio_request_id: 10
                  payer_fio_address: purse@alice
                  payee_fio_address: crypto@bob
                  payer_fio_public_key: FIO7167ErgCveJvuonvrEvVGhdWnkP4AEMfqvEd8s8raMkbbAXqhx
                  payee_fio_public_key: FIO7KGdMYj4ZMY2nUX9EaZu3G3GxZhTNXUq1tsNqC5rcP9rcmvWHq
                  content: ...
                  time_stamp: '2020-09-11T18:30:56'
                  status: rejected
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
            * "Invalid limit"
            * "Invalid offset"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '404':
          description: |-
            Possible error messages:
            * "No FIO Requests"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: No FIO Requests
      summary: Get sent Requests
      description: >-
        Returns FIO Requests that have been sent by provided FIO public key.
      operationId: get_sent_fio_requests
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              limit:
                type: integer
                description: >-
                  Number of requests to return. If omitted, all requests will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First request from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
            required:
              - fio_public_key
      tags:
        - Getters
  /get_received_fio_requests:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              requests:
                type: array
                description: Multiple requests may be returned. All requests are returned.
                items:
                  type: object
                  properties:
                    fio_request_id:
                      type: integer
                      description: ID of the original request.
                    payer_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle (aka FIO Address) of the payer. This address initiated
                        payment.
                    payee_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle of the payee. This address is receiving
                        payment.
                    payer_fio_public_key:
                      type: string
                      description: FIO public key of the payer.
                    payee_fio_public_key:
                      type: string
                      description: FIO public key of the payee.
                    content:
                      type: object
                      title: FIO Request encrypted content
                      description: >-
                        Certain content inside FIO Request is encrypted and
                        packed into this field.


                        Min 64 characters

                        Max 296 characters
                      properties:
                        payee_public_address:
                          type: object
                          title: Native Blockchain Public Address
                          description: "This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.\n\n**Integrated Address**\nIf the blockchain supports it, an integrated address may be passed in just like standard public address. The FIO protocol does not perform validation on the passed string.\n\n**URI Scheme**\nFIO Protocol will support formatting of public addresses using URI were certain attributes are appended to the public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized parameters will be supported in official FIO Protocol SDKs.\n\n**Parameters**\n* dt - Ripple\n* memo - Any - use as generic memo field\n* memo_id -\tStellar\n* memo_text -\tStellar\n* memo_hash -\tStellar\n* memo_return -\tStellar\n* payment_id - Monero\n"
                        amount:
                          type: string
                          description: Amount requested.
                        token_code:
                          type: string
                          title: Token/chain code
                          minLength: 1
                          maxLength: 10
                          pattern: '^[A-Z0-9]+$'
                        memo:
                          type: string
                        hash:
                          type: string
                        offline_url:
                          type: string
                        future_use1:
                          type: string
                        future_use2:
                          type: string
                        future_use3:
                          type: string
                        future_use4:
                          type: string
                        future_use5:
                          type: string
                      required:
                        - payee_public_address
                        - amount
                        - token_code
                        - memo
                        - hash
                        - offline_url
                        - future_use1
                        - future_use2
                        - future_use3
                        - future_use4
                        - future_use5
                    time_stamp:
                      type: string
                      description: Timestamp of request
                    status:
                      type: string
                      title: FIO Request status
                      description: Status of FIO Request
                      enum:
                        - requested
                        - sent_to_blockchain
                        - rejected
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              requests:
                - fio_request_id: 10
                  payer_fio_address: purse@alice
                  payee_fio_address: crypto@bob
                  payer_fio_public_key: FIO7167ErgCveJvuonvrEvVGhdWnkP4AEMfqvEd8s8raMkbbAXqhx
                  payee_fio_public_key: FIO7KGdMYj4ZMY2nUX9EaZu3G3GxZhTNXUq1tsNqC5rcP9rcmvWHq
                  content: ...
                  time_stamp: '2020-09-11T18:30:56'
                  status: rejected
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
            * "Invalid limit"
            * "Invalid offset"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '404':
          description: |-
            Possible error messages:
            * "No received FIO Requests"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: No received FIO Requests
      summary: Get received Requests
      description: >-
        Returns all FIO Requests that have been received by the provided FIO public key.
      operationId: get_received_fio_requests
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              limit:
                type: integer
                description: >-
                  Number of requests to return. If omitted, all requests will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First request from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
            required:
              - fio_public_key
      tags:
        - Getters
  /get_pending_fio_requests:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              requests:
                type: array
                description: Multiple requests may be returned. All requests are returned.
                items:
                  type: object
                  properties:
                    fio_request_id:
                      type: integer
                      description: ID of the original request.
                    payer_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle (aka FIO Address) of the payer. This address initiated
                        payment.
                    payee_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle of the payee. This address is receiving
                        payment.
                    payer_fio_public_key:
                      type: string
                      description: FIO public key of the payer.
                    payee_fio_public_key:
                      type: string
                      description: FIO public key of the payee.
                    content:
                      type: object
                      title: FIO Request encrypted content
                      description: >-
                        Certain content inside FIO Request is encrypted and
                        packed into this field.


                        Min 64 characters

                        Max 296 characters
                      properties:
                        payee_public_address:
                          type: object
                          properties: {}
                          title: Native Blockchain Public Address
                          description: "This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.\n\n**Integrated Address**\nIf the blockchain supports it, an integrated address may be passed in just like standard public address. The FIO protocol does not perform validation on the passed string.\n\n**URI Scheme**\nFIO Protocol will support formatting of public addresses using URI were certain attributes are appended to the public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized parameters will be supported in official FIO Protocol SDKs.\n\n**Parameters**\n* dt - Ripple\n* memo - Any - use as generic memo field\n* memo_id -\tStellar\n* memo_text -\tStellar\n* memo_hash -\tStellar\n* memo_return -\tStellar\n* payment_id - Monero\n"
                        amount:
                          type: string
                          description: Amount requested.
                        token_code:
                          type: string
                          title: Token/chain code
                          minLength: 1
                          maxLength: 10
                          pattern: '^[A-Z0-9]+$'
                        memo:
                          type: string
                        hash:
                          type: string
                        offline_url:
                          type: string
                        future_use1:
                          type: string
                        future_use2:
                          type: string
                        future_use3:
                          type: string
                        future_use4:
                          type: string
                        future_use5:
                          type: string
                      required:
                        - payee_public_address
                        - amount
                        - token_code
                        - memo
                        - hash
                        - offline_url
                        - future_use1
                        - future_use2
                        - future_use3
                        - future_use4
                        - future_use5
                    time_stamp:
                      type: string
                      description: Timestamp of request
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              requests:
                - fio_request_id: 10
                  payer_fio_address: purse@alice
                  payee_fio_address: crypto@bob
                  payer_fio_public_key: FIO7167ErgCveJvuonvrEvVGhdWnkP4AEMfqvEd8s8raMkbbAXqhx
                  payee_fio_public_key: FIO7KGdMYj4ZMY2nUX9EaZu3G3GxZhTNXUq1tsNqC5rcP9rcmvWHq
                  content: ...
                  time_stamp: '2020-09-11T18:30:56'
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
            * "Invalid limit"
            * "Invalid offset"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '404':
          description: |-
            Possible error messages:
            * "No pending FIO Requests"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: No pending FIO Requests
      summary: Get pending Requests
      description: Pending requests call polls for any pending requests sent to a receiver.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              limit:
                type: integer
                description: >-
                  Number of requests to return. If omitted, all requests will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First request from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
            required:
              - fio_public_key
      operationId: get_pending_fio_requests
      tags:
        - Getters
  /get_cancelled_fio_requests:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              requests:
                type: array
                description: Multiple requests may be returned. All requests are returned.
                items:
                  type: object
                  properties:
                    fio_request_id:
                      type: integer
                      description: ID of the original request.
                    payer_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle (aka FIO Address) of the payer. This address initiated
                        payment.
                    payee_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle of the payee. This address is receiving
                        payment.
                    payer_fio_public_key:
                      type: string
                      description: FIO public key of the payer.
                    payee_fio_public_key:
                      type: string
                      description: FIO public key of the payee.
                    content:
                      type: object
                      title: FIO Request encrypted content
                      description: >-
                        Certain content inside FIO Request is encrypted and
                        packed into this field.


                        Min 64 characters

                        Max 296 characters
                      properties:
                        payee_public_address:
                          type: object
                          properties: {}
                          title: Native Blockchain Public Address
                          description: "This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.\n\n**Integrated Address**\nIf the blockchain supports it, an integrated address may be passed in just like standard public address. The FIO protocol does not perform validation on the passed string.\n\n**URI Scheme**\nFIO Protocol will support formatting of public addresses using URI were certain attributes are appended to the public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized parameters will be supported in official FIO Protocol SDKs.\n\n**Parameters**\n* dt - Ripple\n* memo - Any - use as generic memo field\n* memo_id -\tStellar\n* memo_text -\tStellar\n* memo_hash -\tStellar\n* memo_return -\tStellar\n* payment_id - Monero\n"
                        amount:
                          type: string
                          description: Amount requested.
                        token_code:
                          type: string
                          title: Token/chain code
                          minLength: 1
                          maxLength: 10
                          pattern: '^[A-Z0-9]+$'
                        memo:
                          type: string
                        hash:
                          type: string
                        offline_url:
                          type: string
                        future_use1:
                          type: string
                        future_use2:
                          type: string
                        future_use3:
                          type: string
                        future_use4:
                          type: string
                        future_use5:
                          type: string
                      required:
                        - payee_public_address
                        - amount
                        - token_code
                        - memo
                        - hash
                        - offline_url
                        - future_use1
                        - future_use2
                        - future_use3
                        - future_use4
                        - future_use5
                    time_stamp:
                      type: string
                      description: Timestamp of request
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              requests:
                - fio_request_id: 10
                  payer_fio_address: purse@alice
                  payee_fio_address: crypto@bob
                  payer_fio_public_key: FIO7167ErgCveJvuonvrEvVGhdWnkP4AEMfqvEd8s8raMkbbAXqhx
                  payee_fio_public_key: FIO7KGdMYj4ZMY2nUX9EaZu3G3GxZhTNXUq1tsNqC5rcP9rcmvWHq
                  content: ...
                  time_stamp: '2020-09-11T18:30:56'
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
            * "Invalid limit"
            * "Invalid offset"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '404':
          description: |-
            Possible error messages:
            * "No cancelled FIO Requests"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: No FIO Requests
      summary: Get cancelled Requests
      description: >-
        Returned cancelled requests sent by provided FIO public key. 
        See [FIP-3](https://github.com/fioprotocol/fips/blob/master/fip-0003.md) for comprehensive description of this functionality.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              limit:
                type: integer
                description: >-
                  Number of requests to return. If omitted, all requests will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First request from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
            required:
              - fio_public_key
      operationId: get_cancelled_fio_requests
      tags:
        - Getters
  /get_obt_data:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              obt_data_records:
                type: array
                description: Multiple OBT Data Records may be returned.
                items:
                  type: object
                  properties:
                    payer_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle (aka FIO Address) of the payer. This address initiated
                        payment.
                    payee_fio_address:
                      type: string
                      description: >-
                        FIO Crypto Handle of the payee. This address is receiving
                        payment.
                    payer_fio_public_key:
                      type: string
                      description: FIO public key of the payer.
                    payee_fio_public_key:
                      type: string
                      description: FIO public key of the payee.
                    content:
                      type: object
                      title: FIO Data encrypted content
                      description: >-
                        Certain content inside FIO Data is encrypted and packed
                        into this field.


                        Min 64 characters

                        Max 432 characters
                      properties:
                        payer_public_address:
                          type: string
                          description: >-
                            Public address on other blockchain of user sending
                            funds.
                        payee_public_address:
                          type: string
                          description: >-
                            Public address on other blockchain of user receiving
                            funds.
                        amount:
                          type: string
                          description: Amount sent.
                        token_code:
                          type: string
                          title: Token/chain code
                          minLength: 1
                          maxLength: 10
                          pattern: '^[A-Z0-9]+$'
                        status:
                          type: string
                          description: |-
                            Status of this OBT. Allowed statuses are:
                            * sent_to_blockchain
                        obt_id:
                          type: string
                          description: >-
                            Other Blockchain Transaction ID (OBT ID), i.e
                            Bitcoin transaction ID
                        memo:
                          type: string
                          description: memo field
                        hash:
                          type: string
                        offline_url:
                          type: string
                      required:
                        - payer_public_address
                        - payee_public_address
                        - amount
                        - token_code
                        - status
                        - obt_id
                        - memo
                        - hash
                        - offline_url
                    fio_request_id:
                      type: integer
                      description: 'Id of FIO Request, if in response to FIO Request.'
                    status:
                      type: string
                      description: In current version alwasy sent_to_blockchain
                    time_stamp:
                      type: string
                      description: Timestamp of transaction
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              obt_data_records:
                - payer_fio_address: purse@alice
                  payee_fio_address: crypto@bob
                  payer_fio_public_key: FIO7167ErgCveJvuonvrEvVGhdWnkP4AEMfqvEd8s8raMkbbAXqhx
                  payee_fio_public_key: FIO7KGdMYj4ZMY2nUX9EaZu3G3GxZhTNXUq1tsNqC5rcP9rcmvWHq
                  content: ...
                  fio_request_id: 10
                  status: sent_to_blockchain
                  time_stamp: '2020-09-11T18:30:56'
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
            * "Invalid limit"
            * "Invalid offset"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
        '404':
          description: ''
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: No OBT data records
      summary: Get other blockchain transaction metadata
      description: >-
        Retrives Other Blockchain Transaction (OBT) metadata data stored using
        /record_obt_data. This call will return all metadata relevant to the
        provided FIO Public key, including:

        * Outbound transactions where the Payer's FIO Crypto Handle (aka FIO Address) matches the provided FIO Public key

        * Inbound transactions where the Payee's FIO Crypto Handle (aka FIO Address) matches the provided FIO Public key
      operationId: get_obt_data
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              limit:
                type: integer
                description: >-
                  Number of requests to return. If omitted, all requests will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First request from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
            required:
              - fio_public_key
      tags:
        - Getters
  /get_locks:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              lock_amount:
                type: integer
                title: Locked amount
                description: SUFs initially locked.
                example: 40000000000000             
              remaining_lock_amount:
                type: integer
                title: Remaining locked amount
                description: SUFs still locked.
                example: 20000000000000
              time_stamp:
                type: string
                format: date-time
                title: Date/time
                description: Time when lock started.
                example: '2020-09-11T18:30:56'
              payouts_performed:
                type: integer
                title: Payouts performed
                description: Number of unlock periods which were unlocked.
                example: 0
              can_vote:
                type: integer
                title: Can vote
                description: Indicates if the locked amount can vote while locked. 0 - can not vote, 1 - can vote.
                example: 1
              unlock_periods:
                type: array
                items:
                  type: object
                  properties:
                    duration:
                      type: integer
                      title: Duration
                      description: Seconds from lock creation to when unlock of corresponding amount occurs.
                      example: 86400
                    amount:
                      type: integer
                      title: Amount
                      description: Number of locked tokens, in SUFs, that unlock after corresponding duration has lapsed.
                      example: 2020000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_public_key
                  value: FIO123
                  error: Invalid FIO Public Key
        '404':
          description: |-
            Possible error messages:
            * "Public key not found"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: Public key not found
      summary: Get token lock information for account
      description: >-
        Accounts may hold both locked and unlocked FIO tokens. The get_locks API retrieves token lock information for account.
        It returns the total number of locked and unlocked tokens in addition to the lock size and duration of each lock period.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
            required:
              - fio_public_key
      operationId: get_locks
      tags:
        - Getters
  /get_fee:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              fee:
                type: integer
                description: 'Amount of fee in SUFs '
          examples:
            application/json:
              fee: 100000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid end point"
            * "Invalid FIO Address"
            * "No such FIO Address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: end_point
                  value: blah
                  error: Invalid end point
      description: Computes and returns fee amount for specific call and specific user.
      summary: Get fee amount
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              end_point:
                type: string
                description: 'Name of API call end point, e.g. add_pub_address'
                example: add_pub_address
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                description: fio_address is only required for the endpoints listed above
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
            required:
              - end_point
              - fio_address
          description: |-
            Valid FIO Crypto Handle (aka FIO Address) required on the following API endpoints:
            * add_pub_address
            * remove_pub_address
            * remove_all_pub_addresses
            * new_funds_request
            * reject_funds_request
            * cancel_funds_request
            * reject_funds_request
            * record_obt_data
            * burn_fio_address
            * vote_producer
            * proxy_vote
      operationId: get_fee
      tags:
        - Getters
  /get_nfts_fio_address:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              nfts:
                type: array
                description: Multiple NFT Signatures may be returned.
                items:
                  type: object
                  properties:
                    chain_code:
                      type: string
                      description: Chain code.
                    contract_address:
                      type: string
                      description: Contract address.
                    token_id:
                      type: string
                      description: Token ID of NFT.
                    url:
                      type: string
                      description: URL of NFT asset.
                    hash:
                      type: string
                      description: SHA-256 hash of NFT asset.
                    metadata:
                      type: string
                      description: JSON formatted metadata, including creator URL.
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              nfts:
                - chain_code: "ETH"
                  contract_address: "0x63c0691d05f441f42915ca6ca0a6f60d8ce148cd"
                  token_id: "100010001"
                  url: "ipfs://ipfs/QmZ15eQX8FPjfrtdX3QYbrhZxJpbLpvDpsgb2p3VEH8Bqq"
                  hash: "f83b5702557b1ee76d966c6bf92ae0d038cd176aaf36f86a18e2ab59e6aefa4b"
                  metadata: '{\"creator_url\":\"https://yahoo.com/\"}'
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Address"
            * "FIO Address does not exist"
            * "Invalid limit"
            * "Invalid offset"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: bob
                  error: Invalid FIO Address format
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '404':
          description: |-
            Possible error messages:
            * "NFTs not found"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: NFTs not found
      summary: Get Signed NFTs for FIO Crypto Handle
      description: >-
        Returns all NFTs for specified FIO Crypto Handle (aka FIO Address). 
        See [FIP-27](https://github.com/fioprotocol/fips/blob/master/fip-0027.md) for comprehensive description of this functionality.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                description: FIO Crypto Handle (aka FIO Address) that signed the NFTs.
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              limit:
                type: integer
                description: >-
                  Number of NFTs to return. If omitted, all matching NFTs will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First NFT from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
            required:
              - fio_address
      operationId: get_nfts_fio_address
      tags:
        - Getters
  /get_nfts_contract:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              nfts:
                type: array
                description: Multiple NFT Signatures may be returned.
                items:
                  type: object
                  properties:
                    fio_address:
                      type: string
                      description: Chain code.
                    chain_code:
                      type: string
                      description: Chain code.
                    contract_address:
                      type: string
                      description: Contract address.
                    token_id:
                      type: string
                      description: Token ID of NFT.
                    url:
                      type: string
                      description: URL of NFT asset.
                    hash:
                      type: string
                      description: SHA-256 hash of NFT asset.
                    metadata:
                      type: string
                      description: JSON formatted metadata, including creator URL.
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              nfts:
                - fio_address: "purse@alice"
                  chain_code: "ETH"
                  contract_address: "0x63c0691d05f441f42915ca6ca0a6f60d8ce148cd"
                  token_id: "100010001"
                  url: "ipfs://ipfs/QmZ15eQX8FPjfrtdX3QYbrhZxJpbLpvDpsgb2p3VEH8Bqq"
                  hash: "f83b5702557b1ee76d966c6bf92ae0d038cd176aaf36f86a18e2ab59e6aefa4b"
                  metadata: '{\"creator_url\":\"https://yahoo.com/\"}'
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid Chain Code"
            * "Invalid Contract Address"
            * "Invalid Token ID"
            * "Invalid limit"
            * "Invalid offset"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: contract_address
                  value: ""
                  error: Invalid Contract Address
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '404':
          description: |-
            Possible error messages:
            * "NFTs not found"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: NFTs not found
      summary: Get Signed NFTs for contract
      description: >-
        Returns all mapped NFTs which have the specified contract address and (optional) token id.
        See [FIP-27](https://github.com/fioprotocol/fips/blob/master/fip-0027.md) for comprehensive description of this functionality.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              chain_code:
                type: string
                description: Chain code where NFT contract resides
                example: "ETH"
              contract_address:
                type: string
                description: NFT Contract Address
                example: "0x63c0691d05f441f42915ca6ca0a6f60d8ce148cd"
              token_id:
                type: string
                description: NFT Token ID
                example: "100010001"
              limit:
                type: integer
                description: >-
                  Number of NFTs to return. If omitted, all matching NFTs will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First NFT from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
            required:
              - chain_code
              - contract_address
      operationId: get_nfts_contract
      tags:
        - Getters
  /get_nfts_hash:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              nfts:
                type: array
                description: Multiple NFT Signatures may be returned.
                items:
                  type: object
                  properties:
                    fio_address:
                      type: string
                      description: Chain code.
                    chain_code:
                      type: string
                      description: Chain code.
                    contract_address:
                      type: string
                      description: Contract address.
                    token_id:
                      type: string
                      description: Token ID of NFT.
                    url:
                      type: string
                      description: URL of NFT asset.
                    hash:
                      type: string
                      description: SHA-256 hash of NFT asset.
                    metadata:
                      type: string
                      description: JSON formatted metadata, including creator URL.
              more:
                type: integer
                description: |-
                  0 - no more results
                  1 - more results
          examples:
            application/json:
              nfts:
                - fio_address: "purse@alice"
                  chain_code: "ETH"
                  contract_address: "0x63c0691d05f441f42915ca6ca0a6f60d8ce148cd"
                  token_id: "100010001"
                  url: "ipfs://ipfs/QmZ15eQX8FPjfrtdX3QYbrhZxJpbLpvDpsgb2p3VEH8Bqq"
                  hash: "f83b5702557b1ee76d966c6bf92ae0d038cd176aaf36f86a18e2ab59e6aefa4b"
                  metadata: '{\"creator_url\":\"https://yahoo.com/\"}'
              more: 0
        '400':
          description: |-
            Possible error messages:
            * "Invalid hash"
            * "Invalid limit"
            * "Invalid offset"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: hash
                  value: ""
                  error: Invalid hash
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '404':
          description: |-
            Possible error messages:
            * "NFTs not found"
          schema:
            type: object
            properties:
              message:
                type: string
            title: Error 404
            description: >-
              HTTP code 404 is returned when the requested information could not
              be found.
          examples:
            application/json:
              message: NFTs not found
      summary: Get Signed NFTs for hash
      description: >-
        Returns all NFTs which have the specified hash. 
        See [FIP-27](https://github.com/fioprotocol/fips/blob/master/fip-0027.md) for comprehensive description of this functionality.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              hash:
                type: string
                description: SHA-256 hash of NFT asset. For example, the media URL.
                minLength: 3
                maxLength: 64
                example: "f83b5702557b1ee76d966c6bf92ae0d038cd176aaf36f86a18e2ab59e6aefa4b"
              limit:
                type: integer
                description: >-
                  Number of NFTs to return. If omitted, all matching NFTs will be
                  returned.
                minimum: 0
                example: 100
              offset:
                type: integer
                description: 'First NFT from list to return. If omitted, 0 is assumed.'
                minimum: 0
                example: 0
            required:
              - fio_address
      operationId: get_nfts_hash
      tags:
        - Getters
  /get_actor:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            required:
              - actor
            properties:
              actor:
                type: string
          examples:
            application/json:
              actor: gev2yeim1cjy
      summary: Get actor/account from public key
      description: >-
        Convenience method, which returns the [actor](/docs/recipes/actor-account) for the supplied FIO
        Public Key. The FIO Chain is not checked for existence of this actor, it
        simply converts the key to actor using [hash function](/docs/recipes/actor-account).
      operationId: get_actor
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - fio_public_key
            properties:
              fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
      tags:
        - Getters
  /get_account:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              account_name:
                type: string
              head_block_num:
                type: integer
              head_block_time:
                type: string
              privileged:
                type: boolean
              last_code_update:
                type: string
              created:
                type: string
              ram_quota:
                type: integer
              net_weight:
                type: integer
              cpu_weight:
                type: integer
              net_limit:
                type: object
                properties:
                  used:
                    type: integer
                  available:
                    type: integer
                  max:
                    type: integer
              cpu_limit:
                type: object
                properties:
                  used:
                    type: integer
                  available:
                    type: integer
                  max:
                    type: integer
              ram_usage:
                type: integer
              permissions:
                type: array
                items:
                  type: object
                  properties:
                    perm_name:
                      type: string
                    parent:
                      type: string
                    required_auth:
                      type: object
                      properties:
                        threshold:
                          type: integer
                        keys:
                          type: array
                          items:
                            type: object
                            properties:
                              key:
                                type: string
                              weight:
                                type: integer
                        accounts:
                          type: array
                          items:
                            type: object
                        waits:
                          type: array
                          items:
                            type: object
              total_resources:
                type: object
                properties:
                  owner:
                    type: string
                  net_weight:
                    type: string
                  cpu_weight:
                    type: string
                  ram_bytes:
                    type: integer
              self_delegated_bandwidth:
                type: 'null'
              refund_request:
                type: 'null'
              voter_info:
                type: 'null'
          examples:
            application/json:
              account_name: qkx1keadtwau
              head_block_num: 30682251
              head_block_time: '2020-09-18T14:45:02.500'
              privileged: false
              last_code_update: '1970-01-01T00:00:00.000'
              created: '2020-08-31T14:41:54.000'
              ram_quota: 26112
              net_weight: -1
              cpu_weight: -1
              net_limit:
                used: -1
                available: -1
                max: -1
              cpu_limit:
                used: -1
                available: -1
                max: -1
              ram_usage: 2996
              permissions:
                - perm_name: active
                  parent: owner
                  required_auth:
                    threshold: 1
                    keys:
                      - key: FIO5nejysoKY5U9fxGicT6oR2ztW6CPazJRZBoPR1Dh3oJUGssqJE
                        weight: 1
                    accounts: []
                    waits: []
                - perm_name: owner
                  parent: ''
                  required_auth:
                    threshold: 1
                    keys:
                      - key: FIO5nejysoKY5U9fxGicT6oR2ztW6CPazJRZBoPR1Dh3oJUGssqJE
                        weight: 1
                    accounts: []
                    waits: []
              total_resources:
                owner: qkx1keadtwau
                net_weight: 0.000000000 FIO
                cpu_weight: 0.000000000 FIO
                ram_bytes: 0
              self_delegated_bandwidth: null
              refund_request: null
              voter_info: null
      summary: Get account information
      description: >-
        Returns information about the
        [account](/docs/fio-protocol/keys-accounts#fio-accounts), such
        as creation date and permissions.


        If you are trying to use this method to get FIO Public Key from an
        account, please note that users have the options of swapping their key,
        for example to create a multisig, see tw4tjkmo4eyd
      operationId: get_account
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              account_name:
                type: string
                example: 5jfctnozulcb
            required:
              - account_name
      tags:
        - Getters
  /get_info:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              server_version:
                type: string
              chain_id:
                type: string
              head_block_num:
                type: integer
              last_irreversible_block_num:
                type: integer
              last_irreversible_block_id:
                type: string
              head_block_id:
                type: string
              head_block_time:
                type: string
              head_block_producer:
                type: string
              virtual_block_cpu_limit:
                type: integer
              virtual_block_net_limit:
                type: integer
              block_cpu_limit:
                type: integer
              block_net_limit:
                type: integer
              server_version_string:
                type: string
          examples:
            application/json:
              server_version: 8578680f
              chain_id: cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f
              head_block_num: 1201696
              last_irreversible_block_num: 1201656
              last_irreversible_block_id: 001255f8d3e90e4573265d5ee71a64d6a20dccee5226a0c2e30b4c0a1b082068
              head_block_id: 00125620fac409486e7fea1bebb0b506f8beb679b250a76e95e6f50d02e85d3f
              head_block_time: '2019-09-27T15:28:43.500'
              head_block_producer: 5spujqoyq4ie
              virtual_block_cpu_limit: 200000000
              virtual_block_net_limit: 1048576000
              block_cpu_limit: 199900
              block_net_limit: 1048576
              server_version_string: v1.2.1-2421-g92993a283
      summary: Get blockchain information
      description: Retrieves information about the FIO blockchain.
      operationId: get_info
      tags:
        - Getters
  /get_block:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              timestamp:
                type: string
              producer:
                type: string
              confirmed:
                type: integer
              previous:
                type: string
              transaction_mroot:
                type: string
              action_mroot:
                type: string
              schedule_version:
                type: integer
              new_producers:
                type: 'null'
              header_extensions:
                type: array
                items:
                  type: object
              producer_signature:
                type: string
              transactions:
                type: array
                items:
                  type: object
              block_extensions:
                type: array
                items:
                  type: object
              id:
                type: string
              block_num:
                type: integer
              ref_block_prefix:
                type: integer
          examples:
            application/json:
              timestamp: '2019-09-27T15:28:23.500'
              producer: 5spujqoyq4ie
              confirmed: 0
              previous: 001255f72bd0a154355dddec8391de0f20a3619ee6802535e6bd8f4ea2caf0df
              transaction_mroot: '0000000000000000000000000000000000000000000000000000000000000000'
              action_mroot: d8552b686d6b520d39bf27c3bb49968b5ca52e370467962e42edc151437d01c6
              schedule_version: 2
              new_producers: null
              header_extensions: []
              producer_signature: >-
                SIG_K1_K5WD9qbSfJwMz1doYBn5znfFsPh9UiV2p9XAbkDDV2nvpQXq2D23EU6vuGSndSZ7FATqkNn5dqZFtaBricHRJvtgGFZ9pG
              transactions: []
              block_extensions: []
              id: 001255f8d3e90e4573265d5ee71a64d6a20dccee5226a0c2e30b4c0a1b082068
              block_num: 1201656
              ref_block_prefix: 1583162995
      summary: Get block information
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              block_num_or_id:
                type: string
                description: >-
                  last_irreversible_block_num or last_irreversible_block_id from
                  /get_info
                example: '39570'
            required:
              - block_num_or_id
      description: Retrieves information about the specific block.
      operationId: get_block
      tags:
        - Getters
  /get_abi:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: application/json
            properties:
              account_name:
                type: string
              abi:
                type: application/json
                properties:
                  version:
                    type: string
                  types:
                    type: array of objects
                  structs:
                    type: array
                    properties:
                      name:
                        type: string
                      base:
                        type: string
                      fields:
                        type: array
                        properties:
                          name:
                            type: string
                          type: 
                            type: string
                  actions:
                    type: array
                    properties:
                      name:
                        type: string
                      type:
                        type: string
                      ricardian_contract:
                        type: string
                  tables:
                    type: array
                    properties:
                      name:
                        type: string
                      index_type:
                        type: string
                      key_names:
                        type: array of strings
                      key_types:
                        type: array of strings
                      type:
                        type: string                
                  ricardian_clauses:
                    type: array of array
                  error_messages:
                    type: array of strings
                  abi_extensions:
                    type: array of strings
                  variants:
                    type: array of strings
          examples:
            application/json:
              account_name: fio.address
              abi:
                version: eosio::abi/1.0
                types: []
                structs:
                  - name: fioname
                    base: ""
                    fields:
                      - name: id
                        type: uint64
                      - name: name
                        type: string                        
                actions:
                  - name: regaddress
                    type: regaddress
                    ricardian_contract: ""
                tables:
                  - name: fionames
                    index_type: i64
                    key_names:
                      - id
                    key_types:
                      - string
                    type: fioname
                ricardian_clauses: []
                error_messages: []
                abi_extensions: []
                variants: []
      description: Retrieves the ABI for a contract based on its account name.
      summary: Get ABI for contract
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              account_name:
                type: string
                description: Account name for the contract.
                example: fio.address
            required:
              - account_name
      operationId: get_abi
      tags:
        - Getters
  /get_raw_abi:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              account_name:
                type: string
              code_hash:
                type: string
              abi_hash:
                type: string
              abi:
                type: string
          examples:
            application/json:
              account_name: fio.system
              code_hash: 0e5e404480e07b5b1c9d0d8cfbe4f04b8f3fd3477a42251bab8191e6e6c241a8
              abi_hash: d98bbfa97018efcdfbbf42b62406707bc17498e630f58e4529029af71042d861
              abi: >-
                DmVvc2lvOjphYmkvMS4wABMHZmlvbmFtZQAIBG5hbWUGc3RyaW5nCG5hbWVoYXNoBnVpbnQ2NAZkb21haW4Gc3RyaW5nCmRvbWFpbmhhc2gGdWludDY0CmV4cGlyYXRpb24GdWludDY0DW93bmVyX2FjY291bnQEbmFtZQlhZGRyZXNzZXMIc3RyaW5nW10XYnVuZGxlZWxpZ2libGVjb3VudGRvd24GdWludDY0BmRvbWFpbgAFBG5hbWUGc3RyaW5nCmRvbWFpbmhhc2gGdWludDY0CWlzX3B1YmxpYwV1aW50OApleHBpcmF0aW9uBnVpbnQzMgdhY2NvdW50BnVpbnQ2NAljaGFpbkxpc3QAAwRuYW1lBnN0cmluZwJpZAZ1aW50NjQJY2hhaW5oYXNoBnVpbnQzMgplb3Npb19uYW1lAAMHYWNjb3VudARuYW1lCWNsaWVudGtleQZzdHJpbmcHa2V5aGFzaAZ1aW50NjQJY2hhaW5wYWlyAAMFaW5kZXgGdWludDY0CWNoYWlubmFtZQZzdHJpbmcJY2hhaW5oYXNoBnVpbnQ2NApyZWdhZGRyZXNzAAULZmlvX2FkZHJlc3MGc3RyaW5nFG93bmVyX2Zpb19wdWJsaWNfa2V5BnN0cmluZwdtYXhfZmVlBnVpbnQ2NAVhY3RvcgRuYW1lBHRwaWQGc3RyaW5nCmFkZGFkZHJlc3MABgtmaW9fYWRkcmVzcwZzdHJpbmcKdG9rZW5fY29kZQZzdHJpbmcOcHVibGljX2FkZHJlc3MGc3RyaW5nB21heF9mZWUGdWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcJcmVnZG9tYWluAAUKZmlvX2RvbWFpbgZzdHJpbmcUb3duZXJfZmlvX3B1YmxpY19rZXkGc3RyaW5nB21heF9mZWUGdWludDY0BWFjdG9yBG5hbWUEdHBpZAZzdHJpbmcLcmVuZXdkb21haW4ABApmaW9fZG9tYWluBnN0cmluZwdtYXhfZmVlBnVpbnQ2NAR0cGlkBnN0cmluZwVhY3RvcgRuYW1lDHJlbmV3YWRkcmVzcwAEC2Zpb19hZGRyZXNzBnN0cmluZwdtYXhfZmVlBnVpbnQ2NAR0cGlkBnN0cmluZwVhY3RvcgRuYW1lCWV4cGRvbWFpbgACBWFjdG9yBG5hbWUGZG9tYWluBnN0cmluZwxleHBhZGRyZXNzZXMABAVhY3RvcgRuYW1lBmRvbWFpbgZzdHJpbmcOYWRkcmVzc19wcmVmaXgGc3RyaW5nF251bWJlcl9hZGRyZXNzZXNfdG9fYWRkBnVpbnQ2NAxzZXRkb21haW5wdWIABQpmaW9fZG9tYWluBnN0cmluZwlpc19wdWJsaWMFdWludDgHbWF4X2ZlZQZ1aW50NjQFYWN0b3IEbmFtZQR0cGlkBnN0cmluZwtidXJuZXhwaXJlZAAACnJlbW92ZW5hbWUAAAxyZW1vdmVkb21haW4AAApybXZhZGRyZXNzAAALZGVjcmNvdW50ZXIAAQtmaW9fYWRkcmVzcwZzdHJpbmcKYmluZDJlb3NpbwADB2FjY291bnQEbmFtZQpjbGllbnRfa2V5BnN0cmluZwhleGlzdGluZwRib29sDQAAxuqmZJi6CnJlZ2FkZHJlc3MAAADG6qZkUjIKYWRkYWRkcmVzcwAAAJjOSJqYuglyZWdkb21haW4AAKYzkiauproLcmVuZXdkb21haW4AgLG6KRmuproMcmVuZXdhZGRyZXNzAAAAmM5ImmpXCWV4cGRvbWFpbgCAFcbqpmRqVwxleHBhZGRyZXNzZXMAAJK6rnY1rz4LYnVybmV4cGlyZWQAAICSZqpNpboKcmVtb3ZlbmFtZQAwnZE0qU2lugxyZW1vdmVkb21haW4AAADG6qZktrwKcm12YWRkcmVzcwBwdJ3OSJqywgxzZXRkb21haW5wdWIAAAB1mCqRpjsKYmluZDJlb3NpbwAEAAAAWEkzqVsDaTY0AQRuYW1lAQZzdHJpbmcHZmlvbmFtZQAAAABPZyRNA2k2NAEEbmFtZQEGc3RyaW5nBmRvbWFpbgAAAADg6UxDA2k2NAEEbmFtZQEGc3RyaW5nCWNoYWluTGlzdABANTJPTREyA2k2NAEHYWNjb3VudAEGdWludDY0CmVvc2lvX25hbWUAAAAA=
      description: Returns an object containing the smart contract abi.
      summary: Get raw ABI for contract
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              account_name:
                type: string
                description: Account name. Check request definition for specific call.
                example: fio.system
            required:
              - account_name
      operationId: get_raw_abi
      tags:
        - Getters
  /get_producers:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              producers:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      type: string
                    fio_address:
                      type: string
                    total_votes:
                      type: string
                    producer_fio_public_key:
                      type: string
                    is_active:
                      type: integer
                    url:
                      type: string
                    unpaid_blocks:
                      type: integer
                    last_claim_time:
                      type: string
                    location:
                      type: integer
              total_producer_vote_weight:
                type: string
              more:
                type: string
          examples:
            application/json:
              producers:
                - owner: fioproducerd
                  fio_address: ''
                  total_votes: '4999000000000.00000000000000000'
                  producer_fio_public_key: FIO79vbwYtjhBVnBRYDjhCyxRFVr6JsFfVrLVhUKoqFTnceZtPvAU
                  is_active: 1
                  url: ''
                  unpaid_blocks: 302361
                  last_claim_time: '2019-09-20T16:35:26.000'
                  location: 0
                - owner: fioproducerc
                  fio_address: ''
                  total_votes: '3999000000000.00000000000000000'
                  producer_fio_public_key: FIO79vbwYtjhBVnBRYDjhCyxRFVr6JsFfVrLVhUKoqFTnceZtPvAU
                  is_active: 1
                  url: ''
                  unpaid_blocks: 302349
                  last_claim_time: '2019-09-20T16:35:25.500'
                  location: 0
                - owner: fioproducerb
                  fio_address: ''
                  total_votes: '2999000000000.00000000000000000'
                  producer_fio_public_key: FIO79vbwYtjhBVnBRYDjhCyxRFVr6JsFfVrLVhUKoqFTnceZtPvAU
                  is_active: 1
                  url: ''
                  unpaid_blocks: 302352
                  last_claim_time: '2019-09-20T16:35:25.500'
                  location: 0
                - owner: 5spujqoyq4ie
                  fio_address: ''
                  total_votes: '1999000000000.00000000000000000'
                  producer_fio_public_key: FIO77odcm3LYr6YduUxf83a4jp4pQ4YvKAjBkHJnLxq2SsgNSc13u
                  is_active: 1
                  url: ''
                  unpaid_blocks: 302364
                  last_claim_time: '2019-09-20T16:35:25.500'
                  location: 0
                - owner: 2ugokdhavqow
                  fio_address: pawel366688@woohoo56311
                  total_votes: '0.00000000000000000'
                  producer_fio_public_key: FIO1111111111111111111111111111111114T1Anm
                  is_active: 0
                  url: h
                  unpaid_blocks: 0
                  last_claim_time: '2019-09-26T22:40:30.000'
                  location: 80
                - owner: gev2yeim1cjy
                  fio_address: pawel554427@woohoo56311
                  total_votes: '998769980000000.00000000000000000'
                  producer_fio_public_key: FIO1111111111111111111111111111111114T1Anm
                  is_active: 0
                  url: ''
                  unpaid_blocks: 0
                  last_claim_time: '2019-09-26T22:40:22.000'
                  location: 80
              total_producer_vote_weight: '1012765980000000.00000000000000000'
              more: ''
        '400':
          description: |-
            Possible error messages:
            * "Invalid limit"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: limit
                  value: '-100'
                  error: Invalid limit
      summary: Get a list of current block producers
      description: This call returns all block producers and their scaled votes.
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              limit:
                type: string
                description: Total number of producers to retrieve
                example: '10'
              lower_bound:
                type: string
                example: ...........1f
              json:
                type: boolean
                description: Return result in JSON format?
                example: true
      operationId: get_producers
      tags:
        - Getters
  /get_table_rows:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              rows:
                type: array
                description: Rows from table. Format depands on table queried.
                items: {}
              more:
                type: boolean
                description: Indicates if more results are available.
          examples:
            application/json:
              rows:
                - id: 10070
                  name: referral@fio
                  namehash: '0xc3bf40257f090f2887271c515ebac1dc'
                  domain: fio
                  domainhash: '0x8d9d3bd8a6fb22345ce8fa3c416a28e5'
                  expiration: 1624985778
                  owner_account: 534jl4ye5oai
                  addresses:
                    - token_code: FIO
                      chain_code: FIO
                      public_address: FIO6dZx1TeggbrDemzVNdvuVJdgZ4RXAtGMBm5xcHJZVYgPFRQmpk
                  bundleeligiblecountdown: 100
              more: true
      summary: Get content of FIO state table
      description: "This call can be used to return any data from the state table.\n\n### Example: Returning all public addresses\nHere's an advanced example of a query returning all public addresses mapped to a single FIO Crypto Handle (aka FIO Address).\n\nThe data is contained in *fionames* table in *fio.address* contract and *fio.address* scope.\n\nThe FIO Crypto Handle is index position *5* of index_type *i128*.\n\n### Compute index\nThe hash is a truncated sha1 hash, in big-endian order, as a hex-string.\n1. Calculate the sha1 sum of the address\n2. Take the first 16 bytes\n3. Reverse the byte order\n4. Convert to a hexadecimal string, and prepend \"0x\"\n\nExample for \"test@fiotestnet\"\n1. sha1 hash: 58df646ca7a4c9be1e1436b9ae1608eb62e653a0\n2. First 16 bytes: 58df646ca7a4c9be1e1436b9ae1608eb\n3. Reverse byte order (big endian): eb0816aeb936141ebec9a4a76c64df58\n4. Prepend 0x\n\n```\nfunction nameHash(name) {\n    const hash = require('crypto').createHash('sha1')\n    return '0x' + hash.update(name).digest().slice(0,16).reverse().toString(\"hex\")\n}\n\nconsole.log( nameHash('test@fiotestnet') )\n// outputs: 0xeb0816aeb936141ebec9a4a76c64df58\n```\n\n### Query table\nTo query the table, specify index 5, with a type of i128, using the hash as the upper and lower bounds:\n```\n{\n\t\"code\": \"fio.address\",\n\t\"scope\": \"fio.address\",\n\t\"table\": \"fionames\",\n\t\"lower_bound\": \"0xeb0816aeb936141ebec9a4a76c64df58\",\n\t\"upper_bound\": \"0xeb0816aeb936141ebec9a4a76c64df58\",\n\t\"key_type\": \"i128\",\n\t\"index_position\": \"5\",\n\t\"json\": true\n}\n```"
      operationId: get_table_rows
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              code:
                type: string
                description: >-
                  The name of the smart contract that controls the provided
                  table.
                example: fio.address
              scope:
                type: string
                description: The account to which this data belongs.
                example: fio.address
              table:
                type: string
                description: The name of the table as specified by the contract abi.
                example: fionames
              lower_bound:
                type: string
                description: >-
                  Filters results to return the first element that is not less
                  than provided value in set.
                example: '0xeb0816aeb936141ebec9a4a76c64df58'
              upper_bound:
                type: string
                description: >-
                  Filters results to return the first element that is greater
                  than provided value in set.
                example: '0xeb0816aeb936141ebec9a4a76c64df58'
              key_type:
                type: string
                description: >-
                  Type of key specified by index_position (for example -
                  uint64_t or name).
                example: i128
              index_position:
                type: string
                description: Position of the index used.
                example: '5'
              limit:
                type: integer
                description: >-
                  Number of rows to return. If omitted, all requests will be
                  returned.
              json:
                type: boolean
                description: Get the response as json.
                example: true
              reverse:
                type: boolean
                description: Return data in reverse order.
            required:
              - code
              - scope
              - table
      tags:
        - Getters
  trnsfiopubky:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 250000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
            * "Invalid amount value"
            * "Insufficient balance"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: amount
                  value: '100000000000000000'
                  error: Insufficient balance
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Transfer FIO tokens
      description: >-
        This call transfers FIO tokens using a FIO public key.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        trnsfiopubky action data may also be sent to the `/transfer_tokens_pub_key` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.token`

        * name: `trnsfiopubky`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              payee_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              amount:
                type: integer
                description: Amount sent in SUFs
                example: '1000000000'
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 250000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            example:
              payee_public_key: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              amount: '1000000000'
              max_fee: 250000000
              tpid: rewards@wallet
              actor: aftyershcu22
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: transfer_tokens_pub_key_model
      tags:
        - Actions
  trnsloctoks:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 250000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Public Key"
            * "Locked tokens can only be transferred to new account."
            * "Invalid can_vote value."
            * "Invalid amount."
            * "Insufficient balance'"
            * "Invalid fee value"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: amount
                  value: '100000000000000000'
                  error: Insufficient balance
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Transfer locked FIO tokens
      description: >-
        Transfers tokens to a new account and locks those tokens on a pre-defined schedule.
        `trnsloctoks` was originally defined in FIP-6 but was later updated in FIP-21.
        See [FIP-21](https://github.com/fioprotocol/fips/blob/master/fip-0021.md) for a comprehensive description of this functionality.


        trnsloctoks action data may also be sent to the `/transfer_locked_tokens` action-specific endpoint.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        ### `actions` parameters

        * account: `fio.token`

        * name: `trnsloctoks`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              payee_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              can_vote:
                type: integer
                title: Can vote or proxy
                description: This indicates if the locked amount can vote/proxy while locked. 0 = can NOT vote, 1 = can vote.
                example: 0
              periods:
                type: array
                title: Unlock periods
                description: Schedule by which tokens become unlocked.
                items:
                  type: object
                  properties:
                    duration:
                      type: integer
                      description: Seconds from lock creation to when unlock of corresponding percentage occurs.
                    amount:
                      type: integer
                      description: Amount of locked tokens in SUFs that unlock after corresponding duration is lapsed.
                example:
                  - duration: 86400
                    amount: 1000000000000
                  - duration: 172800
                    amount: 500000000000
                  - duration: 259200
                    amount: 500000000000
              amount:
                type: integer
                description: Total amount locked in SUFs.
                example: 2000000000000
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 40000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: transfer_tokens_pub_key_model
      tags:
        - Actions      
  addaddress:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 0
        '400':
          description: >-
            Possible error messages:

            * "Invalid Chain Code"

            * "Invalid token code format"

            * "Invalid public address format"

            * "Min 1, Max 5 public addresses are allowed"

            * "FIO Address expired"

            * "FIO Domain expired"

            * "Invalid fee value"

            * "Insufficient funds to cover fee"

            * "Fee exceeds supplied maximum"

            * "TPID must be empty or valid FIO address"

            * "Maximum token codes mapped to single FIO Address reached. Only
            100 can be mapped."
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: token_code
                  value: BTC!
                  error: Invalid token code format
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Address not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
        '404':
          description: |-
            Possible error messages:
            * "FIO Address not found"
          examples:
            application/json:
              message: FIO Address not found
      summary: Map blockchain public address
      description: >-
        This call allows a public address of the specific blockchain type to be added to the FIO Crypto Handle (aka FIO Address),
        so that it can be returned using /get_pub_address.


        You may pass up to 5 public addresses in a single call. A maximum of 200 public addresses may be 
        mapped to a FIO Crypto Handle.


        The contract action addaddress was modified to accept chain-level public addresses.
        See [FIP-18](https://github.com/fioprotocol/fips/blob/master/fip-0018.md) for a description of 
        chain-level public address functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        addaddress action data may also be sent to the `/add_pub_address` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `addaddress`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              public_addresses:
                type: array
                uniqueItems: true
                minItems: 1
                maxItems: 5
                description: >-
                  Maximum of 5 token codes can be mapped to single FIO Crypto Handle (aka FIO Address)
                  at any one time. See [Mapping Public Addresses](/docs/how-to/mapping)
                  for details.
                items:
                  type: object
                  properties:
                    chain_code:
                      type: string
                      title: Token/chain code
                      minLength: 1
                      maxLength: 10
                      pattern: '^[A-Z0-9]+$'
                      description: >
                        Chain code identifies the blockchain, while token code
                        identifies a token on that blockchain. For example: for
                        USDC: chain_code = ETH and token_code = USDC, for BTC:
                        chain_code = BTC and token_code = BTC. For list of chain
                        codes you can refer to
                        [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
                        and for list of token code refer to the specific
                        blockchain.
                    token_code:
                      type: string
                      title: Token/chain code
                      minLength: 1
                      maxLength: 10
                      pattern: '^[A-Z0-9]+$'
                      description: >
                        Chain code identifies the blockchain, while token code
                        identifies a token on that blockchain. For example: for
                        USDC: chain_code = ETH and token_code = USDC, for BTC:
                        chain_code = BTC and token_code = BTC. For list of chain
                        codes you can refer to
                        [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
                        and for list of token code refer to the specific
                        blockchain.
                    public_address:
                      type: string
                      title: Native Blockchain Public Address
                      minLength: 1
                      maxLength: 128
                      description: |- 
                        This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.


                        **Integrated Address**

                        If the blockchain supports it, an integrated address may be passed in just like standard public address. 
                        The FIO protocol does not perform validation on the passed string.
                        

                        **URI Scheme**

                        FIO Protocol will support formatting of public addresses using URI where certain attributes are appended to the 
                        public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized 
                        parameters will be supported in official FIO Protocol SDKs.
                        

                        **Parameters**

                        * dt - Ripple
                        * memo - Any - use as generic memo field
                        * memo_id - Stellar
                        * memo_text - Stellar
                        * memo_hash - Stellar
                        * memo_return - Stellar
                        * payment_id - Monero

                        See [Mapping Public Addresses](/docs/how-to/mapping)
                  required:
                    - chain_code
                    - token_code
                    - public_address
                example:
                  - chain_code: BTC
                    token_code: BTC
                    public_address: 1PMycacnJaSqwwJqjawXBErnLsZ7RkXUAs
                  - chain_code: ETH
                    token_code: ETH
                    public_address: '0xab5801a7d398351b8be11c439e05c5b3259aec9b'
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 0
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_address
              - public_addresses
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.


            Please read [Mapping Public Addresses](/docs/how-to/mapping) to
            better understand how public address mappings work.
      operationId: add_pub_address_model
      tags:
        - Actions
  remaddress:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 0
        '400':
          description: >-
            Possible error messages:

            * "Invalid FIO Address"

            * "Invalid Public Addresses"

            * "Insufficient funds to cover fee"

            * "Fee exceeds supplied maximum"

            * "TPID must be empty or valid FIO address"

          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: bob
                  error: Invalid FIO Address
        '403':
          description: |-
            Possible triggers:
            * Invalid Actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Remove mapped address
      description: >-
        This call allows a public address of the specific blockchain type to be removed from list of 
        public addresses mapped to the FIO Crypto Handle (aka FIO Address). Once removed, it will no longer be returned using /get_pub_address. 
        See [FIP-4](https://github.com/fioprotocol/fips/blob/master/fip-0004.md) for comprehensive description of this functionality.


        The contract action remaddress was modified to accept chain-level public addresses.
        See [FIP-18](https://github.com/fioprotocol/fips/blob/master/fip-0018.md) for a description of 
        chain-level public address functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        remaddress action data may also be sent to the `/remove_pub_address` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `remaddress`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              public_addresses:
                type: array
                uniqueItems: true
                minItems: 1
                maxItems: 5
                description: >-
                  Maximum of 5 token codes can be mapped to single FIO Crypto Handle (aka FIO Address)
                  at any one time. See [Mapping Public Addresses](/docs/how-to/mapping)
                  for details.
                items:
                  type: object
                  properties:
                    chain_code:
                      type: string
                      title: Token/chain code
                      minLength: 1
                      maxLength: 10
                      pattern: '^[A-Z0-9]+$'
                      description: >
                        Chain code identifies the blockchain, while token code
                        identifies a token on that blockchain. For example: for
                        USDC: chain_code = ETH and token_code = USDC, for BTC:
                        chain_code = BTC and token_code = BTC. For list of chain
                        codes you can refer to
                        [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
                        and for list of token code refer to the specific
                        blockchain.
                    token_code:
                      type: string
                      title: Token/chain code
                      minLength: 1
                      maxLength: 10
                      pattern: '^[A-Z0-9]+$'
                      description: >
                        Chain code identifies the blockchain, while token code
                        identifies a token on that blockchain. For example: for
                        USDC: chain_code = ETH and token_code = USDC, for BTC:
                        chain_code = BTC and token_code = BTC. For list of chain
                        codes you can refer to
                        [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
                        and for list of token code refer to the specific
                        blockchain.
                    public_address:
                      type: object
                      title: Native Blockchain Public Address
                      description: "This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.\n\n**Integrated Address**\nIf the blockchain supports it, an integrated address may be passed in just like standard public address. The FIO protocol does not perform validation on the passed string.\n\n**URI Scheme**\nFIO Protocol will support formatting of public addresses using URI were certain attributes are appended to the public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized parameters will be supported in official FIO Protocol SDKs.\n\n**Parameters**\n* dt - Ripple\n* memo - Any - use as generic memo field\n* memo_id -\tStellar\n* memo_text -\tStellar\n* memo_hash -\tStellar\n* memo_return -\tStellar\n* payment_id - Monero\n"
                  required:
                    - chain_code
                    - token_code
                    - public_address
                example:
                  - chain_code: BTC
                    token_code: BTC
                    public_address: 1PMycacnJaSqwwJqjawXBErnLsZ7RkXUAs
                  - chain_code: ETH
                    token_code: ETH
                    public_address: '0xab5801a7d398351b8be11c439e05c5b3259aec9b'
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 0
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_address
              - public_addresses
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.


            Please read [Mapping Public Addresses](/docs/how-to/mapping) to
            better understand how public address mappings work.
      operationId: rem_pub_address_model
      tags:
        - Actions
  remalladdr:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 0
        '400':
          description: >-
            Possible error messages:

            * "Invalid FIO Address"

            * "Invalid Public Addresses"

            * "Insufficient funds to cover fee"

            * "Fee exceeds supplied maximum"

            * "TPID must be empty or valid FIO address"

          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: bob
                  error: Invalid FIO Address
        '403':
          description: |-
            Possible triggers:
            * Invalid Actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Remove ALL mapped addresses
      description: >-
        This call removes all public addresses mapped to provided FIO Crypto Handle (aka FIO Address). 
        See [FIP-4](https://github.com/fioprotocol/fips/blob/master/fip-0004.md) for comprehensive description of this functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        remalladdr action data may also be sent to the `/remove_all_pub_addresses` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `remalladdr`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 0
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_address
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.


            Please read [Mapping Public Addresses](/docs/how-to/mapping) to
            better understand how public address mappings work.
      operationId: rem_all_pub_addresses_model
      tags:
        - Actions
  newfundsreq:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              fio_request_id:
                type: integer
                description: ID of FIO Request created
              status:
                type: string
                title: FIO Request status
                enum:
                  - requested
                  - request_rejected
                  - sent_to_blockchain
                description: Status of FIO Request
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              fio_request_id: 10
              status: requested
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "No such FIO Address"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "Requires min 64 max 296 size"
            * "Invalid fee value"
            * "Fee exceeds maximum"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: payer_fio_address
                  value: asdfg@pqowieuryt67
                  error: No such FIO Address
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * Payee FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
      summary: Request funds
      description: >-
        This api method will create a new funds request on the FIO chain.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        newfundsreq action data may also be sent to the `/new_funds_request` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.reqobt`

        * name: `newfundsreq`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              payer_fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: pawel788242@woohoo827390
              payee_fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: pawel82825@woohoo827390
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              content:
                type: object
                title: FIO Request encrypted content
                description: >-
                  Certain content inside FIO Request is encrypted and packed
                  into this field.


                  Min 64 characters

                  Max 296 characters


                  See [Encrypting FIO
                  Data](/wallet-integration-guide/encrypting-fio-data) for more
                  information.
                required:
                  - payee_public_address
                  - amount
                  - chain_code
                  - token_code
                  - memo
                  - hash
                  - offline_url
                  - future_use1
                  - future_use2
                  - future_use3
                  - future_use4
                  - future_use5
                properties:
                  payee_public_address:
                    type: string
                    title: Native Blockchain Public Address
                    description: "This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.\n\n**Integrated Address**\nIf the blockchain supports it, an integrated address may be passed in just like standard public address. The FIO protocol does not perform validation on the passed string.\n\n**URI Scheme**\nFIO Protocol will support formatting of public addresses using URI were certain attributes are appended to the public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized parameters will be supported in official FIO Protocol SDKs.\n\n**Parameters**\n* dt - Ripple\n* memo - Any - use as generic memo field\n* memo_id -\tStellar\n* memo_text -\tStellar\n* memo_hash -\tStellar\n* memo_return -\tStellar\n* payment_id - Monero\n"
                  amount:
                    type: string
                    description: Amount requested.
                  chain_code:
                    type: string
                    title: Token/chain code
                    minLength: 1
                    maxLength: 10
                    pattern: '^[A-Z0-9]+$'
                    description: >
                      Chain code identifies the blockchain, while token code
                      identifies a token on that blockchain. For example: for
                      USDC: chain_code = ETH and token_code = USDC, for BTC:
                      chain_code = BTC and token_code = BTC. For list of chain
                      codes you can refer to
                      [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
                      and for list of token code refer to the specific
                      blockchain.
                  token_code:
                    type: string
                    title: Token/chain code
                    minLength: 1
                    maxLength: 10
                    pattern: '^[A-Z0-9]+$'
                    description: >
                      Chain code identifies the blockchain, while token code
                      identifies a token on that blockchain. For example: for
                      USDC: chain_code = ETH and token_code = USDC, for BTC:
                      chain_code = BTC and token_code = BTC. For list of chain
                      codes you can refer to
                      [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
                      and for list of token code refer to the specific
                      blockchain.
                  memo:
                    type: string
                    description: |-
                      Free-form text to pass to Payer.

                      Use either memo or hash/offline_url, but not both.
                  hash:
                    type: string
                    description: |-
                      Hash of off-chain data.

                      Use either memo or hash/offline_url, but not both.
                  offline_url:
                    type: string
                    description: |-
                      Url of where to find off-chain data.

                      Use either memo or hash/offline_url, but not both.
                  future_use1:
                    type: string
                    description: Do not use
                  future_use2:
                    type: string
                    description: Do not use
                  future_use3:
                    type: string
                    description: Do not use
                  future_use4:
                    type: string
                    description: Do not use
                  future_use5:
                    type: string
                    description: Do not use
                example: >-
                  JhTnxX9ntI9n1eucNuJzHS1/JXeLj+GYmPD1uXG/5PBixQeHg40d4p4yHCm6fxfn7eKzcYFlV2AFrQ7j/kRQJUk5OcvJzZtCYuvIx6snciwhOvYtBlN7MWKavxWV3XGAJHBrQxxcHQGW0rtCZM4KzVYYqXWMzihN6mRGDqxGALc=
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 0
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: gev2yeim1cjy
            required:
              - payer_fio_address
              - payee_fio_address
              - content
              - max_fee
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: new_funds_request_model
      tags:
        - Actions
  cancelfndreq:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                title: FIO Request status
                enum:
                  - cancelled
                description: Status of FIO Request
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: cancelled
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "No such FIO Request"
            * "Only pending requests can be cancelled"
            * "Fee exceeds maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_request_id
                  value: '10000000000'
                  error: No such FIO Request
        '403':
          description: >-
            Possible triggers:

            * Signer's FIO Public Key does not match actor

            * Payer's FIO Crypto Handle (aka FIO Address) in specified fio_request_id is not owned by
            the public key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Cancel funds request
      operationId: cancel_funds_request_model
      description: >-
        Cancel a FIO funds request.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        cancelfndreq action data may also be sent to the `/cancel_funds_request` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.reqobt`

        * name: `cancelfndreq`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_request_id:
                type: string
                example: '10'
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 0
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_request_id
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      tags:
        - Actions
  rejectfndreq:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                title: FIO Request status
                enum:
                  - requested
                  - request_rejected
                  - sent_to_blockchain
                description: Status of FIO Request
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: request_rejected
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "No such FIO Request"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_request_id
                  value: '10000000000'
                  error: No such FIO Request
        '403':
          description: >-
            Possible triggers:

            * Signer's FIO Public Key does not match actor

            * Payer's FIO Crypto Handle (aka FIO Address) in specified fio_request_id is not owned by
            the public key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Reject funds request
      operationId: reject_funds_request_model
      description: >-
        Reject a FIO funds request.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        rejectfndreq action data may also be sent to the `/reject_funds_request` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.reqobt`

        * name: `rejectfndreq`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_request_id:
                type: string
                example: '10'
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 0
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_request_id
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      tags:
        - Actions
  recordobt:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: sent_to_blockchain
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: sent_to_blockchain
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "No such FIO Address"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "Requires min 64 max 432 size"
            * "No such FIO Request"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: payee_fio_address
                  value: asdfg@pqowieuryt67
                  error: No such FIO Address
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * Payer's FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Record other blockchain transaction metadata
      description: >-
        This call is made to record Other Blockchain Transaction (OBT) data on the FIO blockchain,
        e.g. 1 BTC was sent on Bitcoin Blockchain, and both sender and receiver have FIO Crypto Handles (aka FIO Addresses).


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        recordobt action data may also be sent to the `/record_obt_data` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.reqobt`

        * name: `recordobt`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              payer_fio_address:
                type: string
                description: >-
                  FIO Address of the payer. This address initiated payment. Also
                  MUST be the same one signing the transaction
                example: purse@alice
              payee_fio_address:
                type: string
                description: FIO Crypto Handle (aka FIO Address) of the payee. This address is receiving payment.
                example: crypto@bob
              content:
                type: object
                title: FIO Data encrypted content
                description: >-
                  Certain content inside FIO Data is encrypted and packed into
                  this field.


                  Min 64 characters

                  Max 432 characters


                  See [Encrypting FIO
                  Data](/wallet-integration-guide/encrypting-fio-data) for more
                  information.
                required:
                  - payer_public_address
                  - payee_public_address
                  - amount
                  - chain_code
                  - token_code
                  - status
                  - obt_id
                  - memo
                  - hash
                  - offline_url
                properties:
                  payer_public_address:
                    type: string
                    description: Public address on other blockchain of user sending funds.
                  payee_public_address:
                    type: string
                    description: >-
                      Public address on other blockchain of user receiving
                      funds.
                  amount:
                    type: string
                    description: Amount sent.
                  chain_code:
                    type: string
                    title: Token/chain code
                    minLength: 1
                    maxLength: 10
                    pattern: '^[A-Z0-9]+$'
                    description: >
                      Chain code identifies the blockchain, while token code
                      identifies a token on that blockchain. For example: for
                      USDC: chain_code = ETH and token_code = USDC, for BTC:
                      chain_code = BTC and token_code = BTC. For list of chain
                      codes you can refer to
                      [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
                      and for list of token code refer to the specific
                      blockchain.
                  token_code:
                    type: string
                    title: Token/chain code
                    minLength: 1
                    maxLength: 10
                    pattern: '^[A-Z0-9]+$'
                    description: >
                      Chain code identifies the blockchain, while token code
                      identifies a token on that blockchain. For example: for
                      USDC: chain_code = ETH and token_code = USDC, for BTC:
                      chain_code = BTC and token_code = BTC. For list of chain
                      codes you can refer to
                      [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
                      and for list of token code refer to the specific
                      blockchain.
                  status:
                    type: string
                    description: |-
                      Status of this OBT. Allowed statuses are:
                      * sent_to_blockchain
                  obt_id:
                    type: string
                    description: >-
                      Other Blockchain Transaction ID (OBT ID), i.e Bitcoin
                      transaction ID
                  memo:
                    type: string
                    description: |-
                      Free-form text to pass to Payee.

                      Use either memo or hash/offline_url, but not both.
                  hash:
                    type: string
                    description: |-
                      Hash of off-chain data.

                      Use either memo or hash/offline_url, but not both.
                  offline_url:
                    type: string
                    description: |-
                      Url of where to find off-chain data.

                      Use either memo or hash/offline_url, but not both.
                example: >-
                  JhTnxX9ntI9n1eucNuJzHS1/JXeLj+GYmPD1uXG/5PBixQeHg40d4p4yHCm6fxfn7eKzcYFlV2AFrQ7j/kRQJUk5OcvJzZtCYuvIx6snciwhOvYtBlN7MWKavxWV3XGAJHBrQxxcHQGW0rtCZM4KzVYYqXWMzihN6mRGDqxGALc=
              fio_request_id:
                type: string
                description: >-
                  * Send empty if no FIO Request ID

                  * ID of FIO Request, if this Record Send transaction is in
                  response to a previously received FIO Request.
                example: '10'
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 0
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - payer_fio_address
              - payee_fio_address
              - content
              - fio_request_id
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: record_obt_data_model
      tags:
        - Actions
  regaddress:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              expiration:
                type: string
                format: date-time
                title: Date/time
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              expiration: '2020-09-11T18:30:56'
              fee_collected: 30000000000
            new:
              status: OK
              expiration: '2020-09-11T18:30:56'
              fee_collected: 30000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO address"
            * "FIO address already registered"
            * "FIO Domain not registered"
            * "FIO Domain expired"
            * "FIO Domain is not public. Only owner can create FIO Addresses."
            * "Invalid FIO Public Key"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: purse@alice
                  error: FIO address already registered
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Register Address
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                description: >-
                  See [FIO Crypto Handle
                  format](https://kb.fioprotocol.io/fio-protocol/fio-addresses/format)


                  Please note that FIO Crypto Handle is case insensitive. If upper
                  case characters are passed in, they will be converted to lower
                  case.
                example: purse@alice
              owner_fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 30000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_address
              - owner_fio_public_key
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      description: >-
        Registers a FIO Crypto Handle (aka FIO Address) on the FIO blockchain.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        regaddress action data may also be sent to the `/register_fio_address` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `regaddress`
      operationId: register_fio_address_model
      tags:
        - Actions
  renewaddress:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              expiration:
                type: string
                format: date-time
                title: Date/time
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              expiration: '2020-09-11T18:30:56'
              fee_collected: 30000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO address"
            * "FIO Domain expired"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Renew Address (deprecated)
      description: >-
        `renewaddress` is deprecated and should be replaced with `addbundles`. After [FIP-31](https://github.com/fioprotocol/fips/blob/master/fip-0031.md) was implemented, 
        FIO Crypto Handles no longer expire and are only burned if the FIO Domain they are on expires.
        
        
        Renews a FIO Crypto Handle (aka FIO Address). When a FIO Crypto Handle is renewed:

        * 365 days are added to the current expiration date (not date when renewal is ran)

        * A new bundle of transactions is added to the existing count.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        renewaddress action data may also be sent to the `/renew_fio_address` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `renewaddress`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 30000000000
              tpid:
                type: string
                title: TPID
                description: >-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_address
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: renew_fio_address_model
      tags:
        - Actions
  addbundles:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              expiration:
                type: string
                format: date-time
                title: Date/time
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              expiration: '2020-09-11T18:30:56'
              fee_collected: 30000000000
        '400':
          description: |-
            Possible error messages:
            * "Payee FIO Address invalid, does not exist or is not mapped to a valid FIO Public Key"
            * "Payer FIO Address invalid or does not exist"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Buy bundled transactions
      description: >-
        Adds bundles of transactions to a FIO Crypto Handle (aka FIO Address). When bundles are purchased 
        one or more sets of bundled transactions are added to the existing count.


        addbundles can also be called with the `/add_bundled_transactions` action-specific endpoint


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        ### `actions` parameters

        * account: `fio.address`

        * name: `addbundles`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              bundle_sets:
                type: integer
                title: Bundles
                description: >-
                  Number of sets of bundles to add to FIO Crypto Handle (aka FIO Address).
                example: 5
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 30000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_address
              - bundles_sets
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: add_bundled_transactions_model
      tags:
        - Actions           
  xferaddress:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
                example: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
                example: 30000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO address"
            * "Invalid FIO Public Key"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
            * "FIO Address expired. Renew first."
            * "FIO Address not registered"
            * "FIO Address is active producer. Unregister first."
            * "FIO Address is proxy. Unregister first."            
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: purse@alice
                  error: FIO Address not registered
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Transfer Address
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                description: >-
                  See [FIO Crypto Handle
                  format](https://kb.fioprotocol.io/fio-protocol/fio-addresses/format)


                  Please note that the FIO Crypto Handle is case insensitive. If upper
                  case characters are passed in, they will be converted to lower
                  case.
                example: purse@alice
              new_owner_fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 30000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_address
              - new_owner_fio_public_key
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      description: >-
        Transfers a FIO Crypto Handle (aka FIO Address) to a new owner. 
        See [FIP-1](https://github.com/fioprotocol/fips/blob/master/fip-0001.md) for comprehensive description of this functionality.


        `xferaddress` action data may also be sent to the `/transfer_fio_address` action-specific endpoint.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        ### `actions` parameters

        * account: `fio.address`

        * name: `xferaddress`
      operationId: transfer_fio_address_model
      tags:
        - Actions        
  burnaddress:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
                example: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
                example: 30000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO address"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
            * "FIO Address not registered"
            * "FIO Address is active producer. Unregister first."
            * "FIO Address is proxy. Unregister first."                                    
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Burn Address
      description: >-
        Permanently burns a FIO Crypto Handle (aka FIO Address).
        See [FIP-7](https://github.com/fioprotocol/fips/blob/master/fip-0007.md) for comprehensive description of this functionality.


        burnaddress action data may also be sent to the `/burn_fio_address` action-specific endpoint.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        ### `actions` parameters

        * account: `fio.address`

        * name: `burnaddress`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 40000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_address
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: burn_fio_address_model
      tags:
        - Actions
  regdomain:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              expiration:
                type: string
                format: date-time
                title: Date/time
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              expiration: '2020-09-11T18:30:56'
              fee_collected: 2000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO domain"
            * "FIO domain already registered"
            * "Invalid FIO Public Key"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
      summary: Register Domain
      description: >-
        Registers a FIO Domain on the FIO blockchain.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        regdomain action data may also be sent to the `/register_fio_domain` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `regdomain`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_domain:
                type: string
                title: FIO Domain
                minLength: 1
                maxLength: 62
                pattern: '^[a-z0-9-]+$'
                description: >-
                  See [FIO Domain
                  format](https://kb.fioprotocol.io/fio-protocol/fio-addresses/format)


                  Please note that FIO Domain is case insensitive. If upper case
                  characters are passed in, they will be converted to lower
                  case.
                example: alice
              owner_fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 2000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_domain
              - owner_fio_public_key
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: register_fio_domain_model
      tags:
        - Actions
  renewdomain:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              expiration:
                type: string
                format: date-time
                title: Date/time
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              expiration: '2020-09-11T18:30:56'
              fee_collected: 30000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO domain"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Renew Domain
      description: >-
        Renews a FIO Domain. When a FIO Domain is renewed 365 days are added to the current expiration date.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        renewdomain action data may also be sent to the `/renew_fio_domain` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `renewdomain`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_domain:
                type: string
                title: FIO Domain
                minLength: 1
                maxLength: 62
                pattern: '^[a-z0-9-]+$'
                example: alice
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 30000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_domain
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: renew_fio_domain_model
      tags:
        - Actions
  setdomainpub:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 10000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO domain"
            * "FIO Domain expired"
            * "Only 0 or 1 allowed"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Make Domain public
      description: >-
        By default all FIO Domains are non-public, meaning only the owner can register FIO Crypto Handles (aka FIO Addresses) on that domain.
        Setting them to public allows anyone to register a FIO Crypto Handle on that domain.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        setdomainpub action data may also be sent to the `/set_fio_domain_public` action-specific endpoint.

        ### `actions` parameters

        * account: "fio.address"

        * name: `setdomainpub`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_domain:
                type: string
                title: FIO Domain
                minLength: 1
                maxLength: 62
                pattern: '^[a-z0-9-]+$'
                example: alice
              is_public:
                type: integer
                description: |-
                  * 1 - allows anyone to register FIO Crypto Handle (aka FIO Address)
                  * 0 - only owner of domain can register FIO Crypto Handle
                example: 1
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 2000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_domain
              - is_public
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: set_fio_domain_public_model
      tags:
        - Actions
  xferdomain:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
                example: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
                example: 2000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO domain"
            * "Invalid FIO Public Key"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "TPID must be empty or valid FIO address"
            * "FIO Domain expired. Renew first"
            * "FIO Domain not registered"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_domain
                  value: '!@#$%'
                  error: Invalid FIO Domain
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '403':
          description: |-
            Possible triggers:
            * The signer does not own the domain
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
      summary: Transfer Domain
      description: >-
        Transfers a FIO Domain to a new owner. 
        See [FIP-1](https://github.com/fioprotocol/fips/blob/master/fip-0001.md) for comprehensive description of this functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        xferdomain action data may also be sent to the `/transfer_fio_domain` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `xferdomain`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_domain:
                type: string
                title: FIO Domain
                minLength: 1
                maxLength: 62
                pattern: '^[a-z0-9-]+$'
                description: >-
                  See [FIO Domain
                  format](https://kb.fioprotocol.io/fio-protocol/fio-addresses/format)


                  Please note that FIO Domain is case insensitive. If upper case
                  characters are passed in, they will be converted to lower
                  case.
                example: alice
              new_owner_fio_public_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 2000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - fio_domain
              - new_owner_fio_public_key
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: transfer_fio_domain_model
      tags:
        - Actions
  addnft:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "FIO Address invalid, does not exist."
            * "FIO Domain expired."
            * "Invalid Chain Code."
            * "Invalid Contract Address."
            * "Invalid Token ID"
            * "Invalid URL"
            * "Invalid hash"
            * "Invalid metadata"
            * "Invalid fee value"
            * "Fee exceeds supplied maximum"
            * "Insufficient balance"
            * "TPID must be empty or valid FIO address"
            * "Min 1, Max 3 NFTs are allowed"         
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: token_code
                  value: BTC!
                  error: Invalid token code format
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Map NFT Signature to a FIO Crypto Handle
      description: >-
        This call allows NFTs to be mapped to a FIO Crypto Handle (aka FIO Address).  It will allow anyone to see which FIO Crypto Handle 
        has mapped ("signed") a particular NFT and if it is a FIO Crypto Handle they trust, they can also trust the NFT.


        You may pass up to 3 NFT Signatures in a single call.


        See [FIP-27](https://github.com/fioprotocol/fips/blob/master/fip-0027.md) for a description of 
        NFT Signature functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        addnft action data may also be sent to the `/add_nft` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `addnft`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              nfts:
                type: array
                uniqueItems: true
                minItems: 1
                maxItems: 3
                description: >-
                  Maximum of 3 NFTs can be mapped to single FIO Crypto Handle (aka FIO Address)
                  at any one time.
                items:
                  type: object
                  properties:
                    chain_code:
                      type: string
                      title: Chain code
                      minLength: 1
                      maxLength: 10
                      pattern: '^[A-Z0-9]+$'
                      description: Chain code where NFT contract resides.
                    contract_address:
                      type: string
                      title: Token/chain code
                      minLength: 1
                      maxLength: 128
                      description: NFT contract address.
                    token_id:
                      type: string
                      title: Token/chain code
                      minLength: 1
                      maxLength: 64
                      description: NFT token ID. May be left blank if not applicable.
                    url:
                      type: string
                      title: NFT URL
                      minLength: 0
                      maxLength: 128
                      description: URL of NFT asset. For example, the media URL. May be left blank if not applicable. 
                    hash:
                      type: string
                      title: NFT Hash
                      minLength: 1
                      maxLength: 64
                      description: SHA-256 hash of NFT asset. For example, the media URL. May be left blank if not applicable. 
                    metadata:
                      type: string
                      title: Native Blockchain Public Address
                      minLength: 0
                      maxLength: 128
                      description: JSON formatted metadata. For example, creator URL. May be left blank if not applicable. 
                  required:
                    - chain_code
                    - contract_address
                    - token_id
                    - url
                    - hash
                    - metadata
                example:
                  - chain_code: "ETH"
                    contract_address: "0x63c0691d05f441f42915ca6ca0a6f60d8ce148cd"
                    token_id: "100010001"
                    url: "ipfs://ipfs/QmZ15eQX8FPjfrtdX3QYbrhZxJpbLpvDpsgb2p3VEH8Bqq"
                    hash: "f83b5702557b1ee76d966c6bf92ae0d038cd176aaf36f86a18e2ab59e6aefa4b"
                    metadata: ""
                  - chain_code: "EOS"
                    contract_address: "atomicassets"
                    token_id: "2199023271139"
                    url: ""
                    hash: ""
                    metadata: "{\"creator_url\":\"https://yahoo.com/\"}"
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000000
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22                
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
            required:
              - fio_address
              - max_fee
              - actor
              - tpid
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: add_nft_model
      tags:
        - Actions
  remnft:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "FIO Address invalid, does not exist."
            * "FIO Domain expired."
            * "Invalid fee value"
            * "Fee exceeds supplied maximum"
            * "Insufficient balance"
            * "TPID must be empty or valid FIO address"
            * "Min 1, Max 3 NFTs are allowed"         
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: BTC!
                  error: Insufficient balance
        '403':
          description: |-
            Possible triggers:
            * "No NFTs"
            * "NFT not found"
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Remove NFT Signature from FIO Crypto Handle
      description: >-
        This call allows NFTs to be removed from a FIO Crypto Handle (aka FIO Address). 


        You may pass up to 3 NFT Signatures in a single call.


        See [FIP-27](https://github.com/fioprotocol/fips/blob/master/fip-0027.md) for a description of 
        NFT Signature functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        remnft action data may also be sent to the `/remove_nft` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `remnft`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              nfts:
                type: array
                uniqueItems: true
                minItems: 1
                maxItems: 3
                description: >-
                  Maximum of 3 NFTs can be mapped to single FIO Crypto Handle (aka FIO Address)
                  at any one time.
                items:
                  type: object
                  properties:
                    chain_code:
                      type: string
                      title: Chain code
                      minLength: 1
                      maxLength: 10
                      pattern: '^[A-Z0-9]+$'
                      description: Chain code where NFT contract resides.
                    contract_address:
                      type: string
                      title: Token/chain code
                      minLength: 1
                      maxLength: 128
                      description: NFT contract address.
                    token_id:
                      type: string
                      title: Token/chain code
                      minLength: 1
                      maxLength: 64
                      description: NFT token ID. May be left blank if not applicable.
                  required:
                    - chain_code
                    - contract_address
                    - token_id
                example:
                  - chain_code: "ETH"
                    contract_address: "0x63c0691d05f441f42915ca6ca0a6f60d8ce148cd"
                    token_id: "100010001"
                  - chain_code: "EOS"
                    contract_address: "atomicassets"
                    token_id: "2199023271139"
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000000
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
            required:
              - fio_address
              - max_fee
              - actor              
              - tpid
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: rem_nft_model
      tags:
        - Actions
  remallnfts:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "FIO Address invalid, does not exist."
            * "FIO Domain expired."
            * "Invalid fee value"
            * "Fee exceeds supplied maximum"
            * "Insufficient balance"
            * "TPID must be empty or valid FIO address"
            * "No NFTs"         
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: BTC!
                  error: Insufficient balance
        '403':
          description: |-
            Possible triggers:
            * "No NFTs"
            * "NFT not found"
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Remove ALL NFT Signatures from FIO Crypto Handle
      description: >-
        This call removes all NFT Signatures from FIO Crypto Handle (aka FIO Address)


        See [FIP-27](https://github.com/fioprotocol/fips/blob/master/fip-0027.md) for a description of 
        NFT Signature functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        remallnfts action data may also be sent to the `/remove_all_nfts` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `remallnfts`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000000
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
            required:
              - fio_address
              - max_fee
              - tpid
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: rem_all_nfts_model
      tags:
        - Actions
  stakefio:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "Account has not voted or is not proxying"
            * "Invalid amount value"
            * "FIO Address invalid, does not exist"
            * "FIO Domain expired"
            * "Invalid fee value"
            * "Fee exceeds supplied maximum"
            * "Insufficient balance"
            * "TPID must be empty or valid FIO address"     
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: actor
                  value: aftyershcu22
                  error: Account has not voted or is not proxying
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Stake FIO Tokens
      description: >-
        This call allows a user to stake their FIO tokens. User can stake any available FIO Token amount in their account at any point in time. 
        To stake, the account has to be voting for at least 1 BP or proxying/auto-proxying. The FIO Tokens do not actually leave the user's account, 
        but are instead "locked" and cannot be spent until unstaked.


        When tokens are staked, they cannot be transferred, used to pay a FIO Chain fee, or locked. Tokens that are Staked do count towards voting power of account.


        Tokens locked via Mainnet or FIP-6 locks, cannot be staked. If the account has Mainnet locked tokens, then the user may stake and 
        unstake the unlocked portion of those tokens in that account (all unlocked tokens are eligible for staking, and should stake and 
        unstake as expected). If the account has general FIP-6 locked tokens, then the user may stake and unstake the unlocked portion of those 
        tokens in the account (all unlocked tokens are eligible for staking, and should stake and unstake as expected).


        When user stakes FIO Tokens they "exchange" FIO Tokens for Staking Reward Points (SRPs) at then current Rate of Exchange (ROE). SRP is not an 
        actual token and cannot be transferred. It simply acts as a representation of future staking rewards and is attached to the account which is staking.


        See [FIP-21](https://github.com/fioprotocol/fips/blob/master/fip-0021.md) for a description of 
        Staking functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        addnft action data may also be sent to the `/stake_fio_tokens` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.staking`

        * name: `stakefio`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              amount:
                type: integer
                title: Amount
                description: Amount of SUFs to stake.
                example: 1000000000
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                description: FIO Crypto Handle (aka FIO Address) is required if using bundled transactions to pay. May be left empty if paying a fee instead.
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22                
            required:
              - amount
              - fio_address
              - max_fee
              - actor
              - tpid
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: add_nft_model
      tags:
        - Actions
  unstakefio:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 0
        '400':
          description: |-
            Possible error messages:
            * "Cannot unstake more than staked"
            * "Invalid amount value"
            * "FIO Address invalid, does not exist"
            * "FIO Domain expired"
            * "Invalid fee value"
            * "Fee exceeds supplied maximum"
            * "Insufficient balance"
            * "TPID must be empty or valid FIO address"     
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: amount
                  value: '999000000000'
                  error: Cannot unstake more than staked
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Unstake FIO Tokens
      description: >-
        This call allows a user to unstake their FIO tokens. User can unstake any amount in their account at any point in time. 
        When they do, they will exchange SRPs back into FIO Tokens at the current Rate of Exchange. 
        Since the ROE is likely to be higher at time of unstake, they will end up with more FIO Tokens than originally staked.


        See [FIP-21](https://github.com/fioprotocol/fips/blob/master/fip-0021.md) for a description of 
        Staking and Unstaking functionality.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        addnft action data may also be sent to the `/unstake_fio_tokens` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.staking`

        * name: `unstakefio`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              amount:
                type: integer
                title: Amount
                description: Amount of SUFs to unstake.
                example: 1000000000
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                description: FIO Crypto Handle (aka FIO Address) is required if using bundled transactions to pay. May be left empty if paying a fee instead.
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000000
              tpid:
                type: string
                title: TPID
                description: |-
                  * FIO Crypto Handle (aka FIO Address) of the wallet which generates this transaction.
                  * This FIO Crypto Handle (aka FIO Address) will be paid 10% of the fee.
                  * See FIO Protocol#TPIDs for details.
                  * Set to empty if not known.
                example: rewards@wallet
              actor:
                type: string
                title: Actor
                description: Valid actor of signer. See [Generating actor](/docs/recipes/actor-account).
                example: aftyershcu22                
            required:
              - amount
              - fio_address
              - max_fee
              - actor
              - tpid
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: add_nft_model
      tags:
        - Actions
  voteproducer:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 10000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid or duplicated producers"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Vote on block producers
      description: >-
        This call submits votes on block producers.


        voteproducer action data may also be sent to the `/vote_producer` action-specific endpoint.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        ### `actions` parameters

        * account: `eosio`

        * name: `voteproducer`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - producers
              - fio_address
              - actor
              - max_fee
            properties:
              producers:
                type: array
                description: List of FIO Crypto Handles (aka FIO Addresses) of block producers to vote on.
                uniqueItems: true
                minItems: 1
                maxItems: 30
                items:
                  type: string
                  title: FIO Crypto Handle (aka FIO Address)
                  minLength: 3
                  maxLength: 64
                  pattern: >-
                    ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example:
                  - BP1
                  - BP2
                  - BP3
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                description: (FIO Crypto Handle (aka FIO Address) field can be an empty string.)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: alice.purse
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: vote_producer_model
      tags:
        - Actions
  voteproxy:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 10000000
        '400':
          description: |-
            Possible error messgaes:
            * "Invalid FIO Address format"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "FIO Address not registered"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "This address is not a proxy"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: pawel379538@woohoo719202
                  error: This address is not a proxy
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Proxy votes to registered proxy
      description: >-
        This call proxies votes of caller to a designated proxy.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        voteproxy action data may also be sent to the `/proxy_vote` action-specific endpoint.

        ### `actions` parameters

        * account: `eosio`

        * name: `voteproxy`
      operationId: proxy_vote_model
      parameters:
        - in: body
          name: body
          schema:
            type: object
            required:
              - proxy
              - fio_address
              - actor
              - max_fee
            properties:
              proxy:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: producer@bob
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                description: (FIO Crypto Handle field can be an empty string.)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: purse@alice
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000
          description: >-
            The `data` object which needs to be included in the transaction instance.
      tags:
        - Actions
  regproxy:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 10000000
        '400':
          description: |-
            Possible error messgaes:
            * "Invalid FIO Address format"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "FIO Address not registered"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "Already registered as proxy"
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: purse@alice
                  error: 'Already registered as proxy. '
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Register as a proxy
      description: >-
        This call registers an entity as a proxy.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and the response object returned in
        `processed->action_traces->receipt->response` string.


        regproxy action data may also be sent to the `/register_proxy` action-specific endpoint.

        ### "actions" parameters

        * account: `eosio`

        * name: `regproxy`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: proxy@bob
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: register_proxy_model
      tags:
        - Actions
  unregproxy:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 10000000
        '400':
          description: |-
            Possible error messgaes:
            * "Invalid FIO Address format"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "FIO Address not registered"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "Not registered as proxy"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Unregister as a proxy
      description: >-
        This call unregisters an entity as a proxy.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        unregproxy action data may also be sent to the `/unregister_proxy` action-specific endpoint.

        ### `actions` parameters

        * account: `eosio`

        * name: `unregproxy`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: proxy@bob
              actor:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: aftyershcu22
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000
            required:
              - fio_address
              - actor
              - max_fee
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: unregister_proxy_model
      tags:
        - Actions
  regproducer:
    options:
      responses:
        '202':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 10000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Address format"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "FIO Address not registered"
            * "Already registered as producer"
            * "Invalid FIO Public Key"
            * "Invalid url"
            * "Invalid location"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "Already registered as producer"
            * "TPID must be empty or valid FIO address"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Register as block producer
      description: >-
        This call registers an entity as a block producer, so that they can be voted on.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        regproducer action data may also be sent to the `/register_producer` action-specific endpoint.

        ### `actions` parameters

        * account: `eosio`

        * name: `regproducer`
      operationId: register_producer_model
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: producer@bob
              fio_pub_key:
                type: string
                title: FIO Public Key
                description: Valid WIF Public Key with FIO Prefix
                example: FIO7tHihSLJVRQ2HsiVGTXAh3RgfXQvVVPpMm8pwQtiTHQHPnY5dH
              url:
                type: string
                description: Url of block producer website
                example: 'https://bobp.io/'
              location:
                type: integer
                description: "Location ID of where BPs servers are located. See table below.\n\nLocations\n* 10\tEast Asia\n* 20\tAustralia\n* 30\tWest Asia\n* 40\tAfrica\n* 50\tEurope\n* 60\tEast North America\n* 70\tSouth America\n* 80\tWest North America"
                example: 80
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000000
            required:
              - fio_address
              - fio_pub_key
              - url
              - location
              - actor
              - max_fee
          description: >-
            The `data` object which needs to be included in the transaction instance.
      tags:
        - Block Producer Actions
  unregprod:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              fee_collected:
                title: Fee collected
                description: Amount of SUFs collected as fee
                type: integer
          examples:
            application/json:
              status: OK
              fee_collected: 10000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Address format"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "FIO Address not registered"
            * "Invalid fee value"
            * "Insufficient funds to cover fee"
            * "Fee exceeds supplied maximum"
            * "Not registered as producer"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: max_fee
                  value: '200'
                  error: Fee exceeds supplied maximum
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Unregister as block producer
      operationId: unregister_producer_model
      description: >-
        This call unregisters an entity as a block producer.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        unregprod action data may also be sent to the `/unregister_producer` action-specific endpoint.

        ### `actions` parameters

        * account: `eosio`

        * name: `unregprod`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: producer@bob
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
              max_fee:
                type: integer
                title: Max fee
                description: >-
                  Maximum amount of SUFs the user is willing to pay for fee.
                  Should be preceded by /get_fee for correct value.
                example: 10000000
            required:
              - fio_address
              - actor
              - max_fee
          description: >-
            The `data` object which needs to be included in the transaction instance.
      tags:
        - Block Producer Actions
  setfeevote:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
          examples:
            application/json:
              status: OK
        '400':
          description: |-
            Possible error messages:
            * "Not an active BP"
            * "Value cannot be negative"
            * "Invalid end_point"
            * "Too soon since last call"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: value
                  value: '-2'
                  error: Value cannot be negative
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Set fee ratios
      description: >-
        This call is only allowed to be made by the top 150 BPs and is designed to submit fee ratios. 


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        setfeevote action data may also be sent to the `/submit_fee_ratios` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.fee`

        * name: `setfeevote`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fee_ratios:
                type: array
                description: Array of fees and corresponding ratios.
                items:
                  type: object
                  properties:
                    end_point:
                      type: string
                      description: Name of endpoint for which fee is being set.
                    value:
                      type: integer
                      description: Fee in SUFs which will be multiplied by multiplier.
                example:
                  - end_point: register_fio_domain
                    value: 40000000000
                  - end_point: register_fio_address
                    value: 2000000000
                  - end_point: renew_fio_domain
                    value: 40000000000
                  - end_point: renew_fio_address
                    value: 2000000000
                  - end_point: add_pub_address
                    value: 30000000
                  - end_point: transfer_tokens_pub_key
                    value: 100000000
                  - end_point: new_funds_request
                    value: 60000000
                  - end_point: reject_funds_request
                    value: 30000000
                  - end_point: record_obt_data
                    value: 60000000
                  - end_point: set_fio_domain_public
                    value: 30000000
                  - end_point: register_producer
                    value: 10000000000
                  - end_point: register_proxy
                    value: 1000000000
                  - end_point: unregister_proxy
                    value: 20000000
                  - end_point: unregister_producer
                    value: 20000000
                  - end_point: proxy_vote
                    value: 30000000
                  - end_point: vote_producer
                    value: 30000000
                  - end_point: auth_delete
                    value: 20000000
                  - end_point: auth_link
                    value: 20000000
                  - end_point: auth_update
                    value: 50000000
                  - end_point: msig_propose
                    value: 50000000
                  - end_point: msig_approve
                    value: 20000000
                  - end_point: msig_unapprove
                    value: 20000000
                  - end_point: msig_cancel
                    value: 20000000
                  - end_point: msig_exec
                    value: 20000000
                  - end_point: msig_invalidate
                    value: 20000000
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: BP_ACTOR
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: submit_fee_ratios_model
      tags:
        - Block Producer Actions
  setfeemult:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
          examples:
            application/json:
              status: OK
        '400':
          description: |-
            Possible error messages:
            * "Not an active BP"
            * "Must be positive"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: multiplier
                  value: '-2.000000'
                  error: ' Must be positive'
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Set fee multiplier
      description: >-
        This call is only allowed to be made by the top 150 BPs and is designed to submit fee multiplier.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        setfeemult action data may also be sent to the `/submit_fee_multiplier` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.fee`

        * name: `setfeemult`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              multiplier:
                type: integer
                description: Multiplier
                example: 100
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - multiplier
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: submit_fee_multiplier_model
      tags:
        - Block Producer Actions
  computefees:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
                example: OK
              fees_processed:
                type: integer
                description: Number of fees processed
                example: 7
        '400':
          description: |-
            Possible error messages:
            * "No Work."
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: compute fees
                  value: compute fees
                  error: No Work.
      summary: Compute fees
      description: >-
        Computes and sets fees in the FIO Protocol. It has no fee.


        computefees can also be called with the `/compute_fees` action-specific endpoint


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        ### `actions` parameters

        * account: `fio.fee`

        * name: `computefees`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: compute_fees_model
      tags:
        - Block Producer Actions
  bundlevote:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
          examples:
            application/json:
              status: OK
        '400':
          description: |-
            Possible error messages:
            * "Not an active BP"
            * "Must be positive int"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: actor
                  value: gev2yeim1cjy
                  error: ' Not an active BP'
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Set bundled transaction count
      description: >-
        This call is only allowed to be made by the top 150 BPs and is designed to submit bundled transaction amount
        which should be allocated to new FIO Crypto Handle (aka FIO Address) registrations.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        bundlevote action data may also be sent to the `/submit_bundled_transaction` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.fee`

        * name: `bundlevote`
      operationId: submit_bundled_transaction_model
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              bundled_transactions:
                type: integer
                description: >-
                  Number of bundled transactions which should be included with
                  every FIO Crypto Handle (aka FIO Address).
                example: 100
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
            required:
              - bundled_transactions
              - actor
          description: >-
            The `data` object which needs to be included in the transaction instance.
      tags:
        - Block Producer Actions
  tpidclaim:
    options:
      responses:
        '202':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              tpids_paid:
                type: integer
          examples:
            application/json:
              status: OK
              tpids_paid: 100
        '400':
          description: |-
            Possible triggers:
            * No work to perform
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: tpidclaim
                  value: tpidclaim
                  error: No work.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Pay rewards to TPIDs
      description: >-
        This is a maintenance call and is intended to pay TPIDs. It is envisioned that this call will be made by BPs
        as good stewards of the blockchain and to free-up state file. This is a signed call, but is free to make.


        When `tpidclaim` is called it iterates through the `fio.tpid` > `tpids` table and processes all rewards that 
        are greater than 100 FIO (100000000000 SUFs)


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        tpidclaim action data may also be sent to the `/pay_tpid_rewards` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.treasury`

        * name: `tpidclaim`
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
          description: >-
            The `data` object which needs to be included in the transaction instance.
      operationId: pay_tpid_rewards_model
      tags:
        - Block Producer Actions
  bpclaim:
    options:
      responses:
        '200':
          description: >-
            This section defines only the contents of the response returned in
            `processed->action_traces->receipt->response` string. See
            [push_transaction](#post-/push_transaction) section for the
            definition of the actual response.
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              amount:
                type: integer
                description: Amount of payment in SUFs
          examples:
            application/json:
              status: OK
              amount: 100000000000
        '400':
          description: |-
            Possible error messages:
            * "Invalid FIO Address"
            * "FIO Address expired"
            * "FIO Domain expired"
            * "FIO Address not producer or nothing payable"
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: fio_address
                  value: purse@alice
                  error: FIO Address expired
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
            * FIO Crypto Handle (aka FIO Address) not owned by FIO Public Key in signature
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Claim BP rewards
      description: >-
        This is a maintenance call and is intended to pay the calling BP. This call can only be made by BPs once every 24 hours.
        This is a signed call, but is free to make.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        bpclaim action data may also be sent to the `/claim_bp_rewards` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.treasury`

        * name: `bpclaim`
      operationId: claim_bp_rewards_model
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              fio_address:
                type: string
                title: FIO Crypto Handle (aka FIO Address)
                minLength: 3
                maxLength: 64
                pattern: >-
                  ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
                example: producer@bob
              actor:
                type: string
                title: Actor
                description: 'See [Generating actor](/docs/recipes/actor-account)'
                example: aftyershcu22
          description: >-
            The `data` object which needs to be included in the transaction instance.
      tags:
        - Block Producer Actions
  burnexpired:
    options:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              status:
                type: string
                description: OK
              items_burned:
                type: integer
          examples:
            application/json:
              status: OK
              items_burned: 100
        '400':
          description: |-
            Possible triggers:
            * No work to be performed
          schema:
            type: object
            properties:
              type:
                type: string
              message:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    value:
                      type: string
                    error:
                      type: string
            description: >-
              HTTP code 400 is returned when request was malformed or contained
              improper values. The response body will indicate the name of the
              incorrect field, its type, and the value the service received.
            title: Error 400
          examples:
            application/json:
              type: invalid_input
              message: >-
                An invalid request was sent in, please check the nested errors
                for details.
              fields:
                - name: burnexpired
                  value: burnexpired
                  error: No work.
        '403':
          description: |-
            Possible triggers:
            * Signer's FIO Public Key does not match actor
          schema:
            type: object
            properties: {}
            description: >-
              HTTP code 403 is returned when the request signature is not valid
              or this user is not allowed to sign this transaction.
            title: Error 403
          examples:
            application/json:
              type: invalid_signature
              message: Request signature not valid or not allowed.
      summary: Burn expired FIO Crypto Handles and Domains
      description: >-
        This is a maintenance call and is intended to burn FIO Crypto Handles (aka FIO Addresses) and Domains which have passed their
        expiration date and need to be removed from state. It is envisioned that this call will be made by BPs
        as good stewards of the blockchain and to free-up state file. This is a signed call, but is free to make.


        This section defines the object which needs to be created before it's
        packed and signed for [push_transaction](#post-/push_transaction) and
        the response object returned in
        `processed->action_traces->receipt->response` string.


        burnexpired action data may also be sent to the `/burn_expired` action-specific endpoint.

        ### `actions` parameters

        * account: `fio.address`

        * name: `burnexpired`
      operationId: burn_expired_model
      parameters: []
      tags:
        - Block Producer Actions
  /push_transaction:
    post:
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              transaction_id:
                type: string
              processed:
                type: object
                properties:
                  id:
                    type: string
                  block_num:
                    type: integer
                  block_time:
                    type: string
                  producer_block_id:
                    type: string
                  receipt:
                    type: object
                    properties:
                      status:
                        type: string
                      cpu_usage_us:
                        type: integer
                      net_usage_words:
                        type: integer
                  elapsed:
                    type: integer
                  net_usage:
                    type: integer
                  scheduled:
                    type: boolean
                  action_traces:
                    type: array
                    items:
                      type: object
                      properties:
                        receipt:
                          type: object
                          properties:
                            receiver:
                              type: string
                            response:
                              type: string
                            act_digest:
                              type: string
                            global_sequence:
                              type: integer
                            recv_sequence:
                              type: integer
                            auth_sequence:
                              type: array
                              items:
                                type: integer
                            code_sequence:
                              type: integer
                            abi_sequence:
                              type: integer
                        act:
                          type: object
                          properties:
                            account:
                              type: string
                            name:
                              type: string
                            authorization:
                              type: array
                              items:
                                type: object
                                properties:
                                  actor:
                                    type: string
                                  permission:
                                    type: string
                            data:
                              type: object
                              properties:
                                fio_domain:
                                  type: string
                                owner_fio_public_key:
                                  type: string
                                max_fee:
                                  type: integer
                                actor:
                                  type: string
                                tpid:
                                  type: string
                            hex_data:
                              type: string
                        context_free:
                          type: boolean
                        elapsed:
                          type: integer
                        console:
                          type: string
                        trx_id:
                          type: string
                        block_num:
                          type: integer
                        block_time:
                          type: string
                        producer_block_id:
                          type: string
                        account_ram_deltas:
                          type: array
                          items:
                            type: object
                            properties:
                              account:
                                type: string
                              delta:
                                type: integer
                        inline_traces:
                          type: array
                          items:
                            type: object
                            properties:
                              receipt:
                                type: object
                                properties:
                                  receiver:
                                    type: string
                                  response:
                                    type: string
                                  act_digest:
                                    type: string
                                  global_sequence:
                                    type: integer
                                  recv_sequence:
                                    type: integer
                                  auth_sequence:
                                    type: array
                                    items:
                                      type: integer
                                  code_sequence:
                                    type: integer
                                  abi_sequence:
                                    type: integer
                              act:
                                type: object
                                properties:
                                  account:
                                    type: string
                                  name:
                                    type: string
                                  authorization:
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        actor:
                                          type: string
                                        permission:
                                          type: string
                                  data:
                                    type:
                                      - object
                                      - string
                                    properties:
                                      from:
                                        type: string
                                      to:
                                        type: string
                                      quantity:
                                        type: string
                                      memo:
                                        type: string
                                  hex_data:
                                    type: string
                              context_free:
                                type: boolean
                              elapsed:
                                type: integer
                              console:
                                type: string
                              trx_id:
                                type: string
                              block_num:
                                type: integer
                              block_time:
                                type: string
                              producer_block_id:
                                type: string
                              account_ram_deltas:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    account:
                                      type: string
                                    delta:
                                      type: integer
                              inline_traces:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    receipt:
                                      type: object
                                      properties:
                                        receiver:
                                          type: string
                                        response:
                                          type: string
                                        act_digest:
                                          type: string
                                        global_sequence:
                                          type: integer
                                        recv_sequence:
                                          type: integer
                                        auth_sequence:
                                          type: array
                                          items:
                                            type: integer
                                        code_sequence:
                                          type: integer
                                        abi_sequence:
                                          type: integer
                                    act:
                                      type: object
                                      properties:
                                        account:
                                          type: string
                                        name:
                                          type: string
                                        authorization:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              actor:
                                                type: string
                                              permission:
                                                type: string
                                        data:
                                          type: object
                                          properties:
                                            from:
                                              type: string
                                            to:
                                              type: string
                                            quantity:
                                              type: string
                                            memo:
                                              type: string
                                        hex_data:
                                          type: string
                                    context_free:
                                      type: boolean
                                    elapsed:
                                      type: integer
                                    console:
                                      type: string
                                    trx_id:
                                      type: string
                                    block_num:
                                      type: integer
                                    block_time:
                                      type: string
                                    producer_block_id:
                                      type: string
                                    account_ram_deltas:
                                      type: array
                                      items:
                                        type: object
                                    inline_traces:
                                      type: array
                                      items:
                                        type: object
          examples:
            application/json:
              transaction_id: 84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
              processed:
                id: >-
                  84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                block_num: 1201721
                block_time: '2019-09-27T15:28:56.000'
                producer_block_id: null
                receipt:
                  status: executed
                  cpu_usage_us: 2403
                  net_usage_words: 17
                elapsed: 2403
                net_usage: 136
                scheduled: false
                action_traces:
                  - receipt:
                      receiver: fio.address
                      response: >-
                        {"expiration":"2020-09-26T15:28:56","fee_collected":5000000000,"status":"OK"}
                      act_digest: >-
                        51b6825f1b8c639a3071c0267d29d6ff40b11a9cbcd094885dcd69da92d2a6a1
                      global_sequence: 1212122
                      recv_sequence: 42
                      auth_sequence:
                        - - gev2yeim1cjy
                          - 75
                      code_sequence: 1
                      abi_sequence: 1
                    act:
                      account: fio.address
                      name: regaddress
                      authorization:
                        - actor: gev2yeim1cjy
                          permission: active
                      data:
                        fio_address: pawel554427@woohoo56311
                        owner_fio_public_key: ''
                        max_fee: 5000000000
                        actor: gev2yeim1cjy
                        tpid: ''
                      hex_data: >-
                        17706177656c3535343432373a776f6f686f6f35363331310000f2052a01000000e01f0ad2292fb66200
                    context_free: false
                    elapsed: 1913
                    console: >
                      OWNER:gev2yeim1cjy...Value:7112924518142320608...Key:FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj...hash:18446744073642438656

                      1601134136 INSIDE.   2020   TESTINSIDE.   5000000000

                      fionamefound:

                      Cannot register TPID or FIO Crypto Handle (aka FIO Address) not found. The
                      transaction will continue without TPID payment.
                    trx_id: >-
                      84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                    block_num: 1201721
                    block_time: '2019-09-27T15:28:56.000'
                    producer_block_id: null
                    account_ram_deltas:
                      - account: fio.address
                        delta: 646
                    except: null
                    inline_traces:
                      - receipt:
                          receiver: fio.token
                          response: ''
                          act_digest: >-
                            41051fa782f88f79085466aa9f1aff1f918a69b8a3a82a0554060aaf1e8ea5d2
                          global_sequence: 1212123
                          recv_sequence: 84
                          auth_sequence:
                            - - gev2yeim1cjy
                              - 76
                          code_sequence: 1
                          abi_sequence: 1
                        act:
                          account: fio.token
                          name: transfer
                          authorization:
                            - actor: gev2yeim1cjy
                              permission: active
                          data:
                            from: gev2yeim1cjy
                            to: fio.treasury
                            quantity: 5.000000000 FIO
                            memo: FIO API fees. Thank you.
                          hex_data: >-
                            e01f0ad2292fb662e0afc646dd0ca85b00f2052a010000000946494f000000001846494f2041504920666565732e205468616e6b20796f752e
                        context_free: false
                        elapsed: 129
                        console: ''
                        trx_id: >-
                          84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                        block_num: 1201721
                        block_time: '2019-09-27T15:28:56.000'
                        producer_block_id: null
                        account_ram_deltas: []
                        except: null
                        inline_traces:
                          - receipt:
                              receiver: gev2yeim1cjy
                              response: ''
                              act_digest: >-
                                41051fa782f88f79085466aa9f1aff1f918a69b8a3a82a0554060aaf1e8ea5d2
                              global_sequence: 1212124
                              recv_sequence: 19
                              auth_sequence:
                                - - gev2yeim1cjy
                                  - 77
                              code_sequence: 1
                              abi_sequence: 1
                            act:
                              account: fio.token
                              name: transfer
                              authorization:
                                - actor: gev2yeim1cjy
                                  permission: active
                              data:
                                from: gev2yeim1cjy
                                to: fio.treasury
                                quantity: 5.000000000 FIO
                                memo: FIO API fees. Thank you.
                              hex_data: >-
                                e01f0ad2292fb662e0afc646dd0ca85b00f2052a010000000946494f000000001846494f2041504920666565732e205468616e6b20796f752e
                            context_free: false
                            elapsed: 3
                            console: ''
                            trx_id: >-
                              84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                            block_num: 1201721
                            block_time: '2019-09-27T15:28:56.000'
                            producer_block_id: null
                            account_ram_deltas: []
                            except: null
                            inline_traces: []
                          - receipt:
                              receiver: fio.treasury
                              response: ''
                              act_digest: >-
                                41051fa782f88f79085466aa9f1aff1f918a69b8a3a82a0554060aaf1e8ea5d2
                              global_sequence: 1212125
                              recv_sequence: 113
                              auth_sequence:
                                - - gev2yeim1cjy
                                  - 78
                              code_sequence: 1
                              abi_sequence: 1
                            act:
                              account: fio.token
                              name: transfer
                              authorization:
                                - actor: gev2yeim1cjy
                                  permission: active
                              data:
                                from: gev2yeim1cjy
                                to: fio.treasury
                                quantity: 5.000000000 FIO
                                memo: FIO API fees. Thank you.
                              hex_data: >-
                                e01f0ad2292fb662e0afc646dd0ca85b00f2052a010000000946494f000000001846494f2041504920666565732e205468616e6b20796f752e
                            context_free: false
                            elapsed: 11
                            console: ''
                            trx_id: >-
                              84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                            block_num: 1201721
                            block_time: '2019-09-27T15:28:56.000'
                            producer_block_id: null
                            account_ram_deltas: []
                            except: null
                            inline_traces: []
                      - receipt:
                          receiver: fio.treasury
                          response: ''
                          act_digest: >-
                            1a7775344923ca0ff6340e6c0ae2d246ef2899f908a550741d0cfe02d4ce2c0d
                          global_sequence: 1212126
                          recv_sequence: 114
                          auth_sequence:
                            - - fio.system
                              - 51
                          code_sequence: 1
                          abi_sequence: 1
                        act:
                          account: fio.treasury
                          name: fdtnrwdupdat
                          authorization:
                            - actor: fio.system
                              permission: active
                          data: 00e1f50500000000
                        context_free: false
                        elapsed: 51
                        console: ''
                        trx_id: >-
                          84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                        block_num: 1201721
                        block_time: '2019-09-27T15:28:56.000'
                        producer_block_id: null
                        account_ram_deltas:
                          - account: fio.treasury
                            delta: 0
                        except: null
                        inline_traces: []
                      - receipt:
                          receiver: fio.treasury
                          response: ''
                          act_digest: >-
                            f549782fb7ac5903d111ca2e52dd25599b4220ff6958431da5c493cdc97cefca
                          global_sequence: 1212127
                          recv_sequence: 115
                          auth_sequence:
                            - - fio.system
                              - 52
                          code_sequence: 1
                          abi_sequence: 1
                        act:
                          account: fio.treasury
                          name: bppoolupdate
                          authorization:
                            - actor: fio.system
                              permission: active
                          data: '0011102401000000'
                        context_free: false
                        elapsed: 34
                        console: ''
                        trx_id: >-
                          84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                        block_num: 1201721
                        block_time: '2019-09-27T15:28:56.000'
                        producer_block_id: null
                        account_ram_deltas:
                          - account: fio.treasury
                            delta: 0
                        except: null
                        inline_traces: []
                except: null
      description: >-
        push_transaction is a generic API endpoint that accepts all [FIO action data objects](/pages/api/fio-api/#tag--Actions).
        It is an alternative to sending transactions to [action-specific FIO API endpoints](/pages/api/fio-api/#post-/fio_api_endpoint).


        [Transaction instances](/pages/api/fio-api/#options-transaction) consist of a transaction header, the list of action instances,
        and transaction extensions that make the actual transaction.


        All transactions must be [packed and signed](/pages/api/fio-api/#options-packed_transaction) prior to submitting them to /push_transaction.


        See [Submitting Transactions](/docs/how-to/transactions) for more details.


        Every action is defined by a [FIO Action data object](/pages/api/fio-api/#tag--Actions) that identifies what will be
        executed on the blockchain (for example, [Register FIO Crypto Handle (aka FIO Address)](/pages/api/fio-api/#options-regaddress)).
        FIO Action data object are entered into the `data` in `actions` array of the transaction instance.
        The `account` and `name` are provided for each action.
      summary: Push Transaction
      operationId: push_transaction
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              signatures:
                type: array
                items:
                  type: string
              compression:
                type: string
              packed_context_free_data:
                type: string
              packed_trx:
                type: string
            title: Signed transaction request
      tags:
        - Transactions
  /fio_api_endpoint:
    post:
      description: >-
        FIO protocol also includes action-specific FIO API endpoints for convenience.
        These action-specific endpoints may be used as an alternative to [push_transaction](/pages/api/fio-api/#post-/push_transaction).


        Action-specific API endpoints are identified in the [Actions](/pages/api/fio-api/#tag--Actions) section of the API alongside their associated action.


        [Transaction instances](/pages/api/fio-api/#options-transaction) consist of a transaction header, the list of action instances,
        and transaction extensions that make the actual transaction.


        All transactions must be [packed and signed](/pages/api/fio-api/#options-packed_transaction) prior to submitting them to a FIO API endpoint.


        See [Submitting Transactions](/docs/how-to/transactions) for more details.


        Every action is defined by a [FIO Action data object](/pages/api/fio-api/#tag--Actions) that identifies what will be
        executed on the blockchain (for example, [Register FIO Crypto Handle (aka FIO Address)](/pages/api/fio-api/#options-regaddress)).
        FIO Action data object are entered into the `data` in `actions` array of the transaction instance.
      summary: Action-specific API Endpoints
      operationId:
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              signatures:
                type: array of strings
                items:
                  type: string
                description: Digital signatures after transaction is signed
              compression:
                type: string
                description: Compression method used
              packed_context_free_data:
                type: string
                description: Compressed context-free data (if transaction compressed)
              packed_trx:
                type: string
                description: Compressed transaction (if compressed)
            title: Signed transaction request
            example:
              signatures: >-
                  SIG_K1_KcK1HYTQUmmiivGovvQJdZF4z7zYVuydaKSTUzF2kzzJ4b7YYdhE1WpPxxwfWWXY3uFFxuBUsaBfseviyd5RURn4zbS4no
              compression: none
              packed_context_free_data: ''
              packed_trx: >-
                c32b8e5df85573265d5e0000000001008054197b0ca85b00a6339226aea6ba01e01f0ad2292fb66200000000a8ed3232340b776f6f686f6f353633313100902f500900000017706177656c3336363638383a776f6f686f6f3536333131e01f0ad2292fb66200
          description: >-
            This is a signed and packed transaction that is ready to be sent to an action-specific FIO API endpoint.
      responses:
        '200':
          description: ''
          schema:
            type: object
            properties:
              transaction_id:
                type: string
              processed:
                type: object
                properties:
                  id:
                    type: string
                  block_num:
                    type: integer
                  block_time:
                    type: string
                  producer_block_id:
                    type: string
                  receipt:
                    type: object
                    properties:
                      status:
                        type: string
                      cpu_usage_us:
                        type: integer
                      net_usage_words:
                        type: integer
                  elapsed:
                    type: integer
                  net_usage:
                    type: integer
                  scheduled:
                    type: boolean
                  action_traces:
                    type: array
                    items:
                      type: object
                      properties:
                        receipt:
                          type: object
                          properties:
                            receiver:
                              type: string
                            response:
                              type: string
                            act_digest:
                              type: string
                            global_sequence:
                              type: integer
                            recv_sequence:
                              type: integer
                            auth_sequence:
                              type: array
                              items:
                                type: integer
                            code_sequence:
                              type: integer
                            abi_sequence:
                              type: integer
                        act:
                          type: object
                          properties:
                            account:
                              type: string
                            name:
                              type: string
                            authorization:
                              type: array
                              items:
                                type: object
                                properties:
                                  actor:
                                    type: string
                                  permission:
                                    type: string
                            data:
                              type: object
                              properties:
                                fio_domain:
                                  type: string
                                owner_fio_public_key:
                                  type: string
                                max_fee:
                                  type: integer
                                actor:
                                  type: string
                                tpid:
                                  type: string
                            hex_data:
                              type: string
                        context_free:
                          type: boolean
                        elapsed:
                          type: integer
                        console:
                          type: string
                        trx_id:
                          type: string
                        block_num:
                          type: integer
                        block_time:
                          type: string
                        producer_block_id:
                          type: string
                        account_ram_deltas:
                          type: array
                          items:
                            type: object
                            properties:
                              account:
                                type: string
                              delta:
                                type: integer
                        inline_traces:
                          type: array
                          items:
                            type: object
                            properties:
                              receipt:
                                type: object
                                properties:
                                  receiver:
                                    type: string
                                  response:
                                    type: string
                                  act_digest:
                                    type: string
                                  global_sequence:
                                    type: integer
                                  recv_sequence:
                                    type: integer
                                  auth_sequence:
                                    type: array
                                    items:
                                      type: integer
                                  code_sequence:
                                    type: integer
                                  abi_sequence:
                                    type: integer
                              act:
                                type: object
                                properties:
                                  account:
                                    type: string
                                  name:
                                    type: string
                                  authorization:
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        actor:
                                          type: string
                                        permission:
                                          type: string
                                  data:
                                    type:
                                      - object
                                      - string
                                    properties:
                                      from:
                                        type: string
                                      to:
                                        type: string
                                      quantity:
                                        type: string
                                      memo:
                                        type: string
                                  hex_data:
                                    type: string
                              context_free:
                                type: boolean
                              elapsed:
                                type: integer
                              console:
                                type: string
                              trx_id:
                                type: string
                              block_num:
                                type: integer
                              block_time:
                                type: string
                              producer_block_id:
                                type: string
                              account_ram_deltas:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    account:
                                      type: string
                                    delta:
                                      type: integer
                              inline_traces:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    receipt:
                                      type: object
                                      properties:
                                        receiver:
                                          type: string
                                        response:
                                          type: string
                                        act_digest:
                                          type: string
                                        global_sequence:
                                          type: integer
                                        recv_sequence:
                                          type: integer
                                        auth_sequence:
                                          type: array
                                          items:
                                            type: integer
                                        code_sequence:
                                          type: integer
                                        abi_sequence:
                                          type: integer
                                    act:
                                      type: object
                                      properties:
                                        account:
                                          type: string
                                        name:
                                          type: string
                                        authorization:
                                          type: array
                                          items:
                                            type: object
                                            properties:
                                              actor:
                                                type: string
                                              permission:
                                                type: string
                                        data:
                                          type: object
                                          properties:
                                            from:
                                              type: string
                                            to:
                                              type: string
                                            quantity:
                                              type: string
                                            memo:
                                              type: string
                                        hex_data:
                                          type: string
                                    context_free:
                                      type: boolean
                                    elapsed:
                                      type: integer
                                    console:
                                      type: string
                                    trx_id:
                                      type: string
                                    block_num:
                                      type: integer
                                    block_time:
                                      type: string
                                    producer_block_id:
                                      type: string
                                    account_ram_deltas:
                                      type: array
                                      items:
                                        type: object
                                    inline_traces:
                                      type: array
                                      items:
                                        type: object
          examples:
            application/json:
              transaction_id: 84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
              processed:
                id: >-
                  84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                block_num: 1201721
                block_time: '2019-09-27T15:28:56.000'
                producer_block_id: null
                receipt:
                  status: executed
                  cpu_usage_us: 2403
                  net_usage_words: 17
                elapsed: 2403
                net_usage: 136
                scheduled: false
                action_traces:
                  - receipt:
                      receiver: fio.address
                      response: >-
                        {"expiration":"2020-09-26T15:28:56","fee_collected":5000000000,"status":"OK"}
                      act_digest: >-
                        51b6825f1b8c639a3071c0267d29d6ff40b11a9cbcd094885dcd69da92d2a6a1
                      global_sequence: 1212122
                      recv_sequence: 42
                      auth_sequence:
                        - - gev2yeim1cjy
                          - 75
                      code_sequence: 1
                      abi_sequence: 1
                    act:
                      account: fio.address
                      name: regaddress
                      authorization:
                        - actor: gev2yeim1cjy
                          permission: active
                      data:
                        fio_address: pawel554427@woohoo56311
                        owner_fio_public_key: ''
                        max_fee: 5000000000
                        actor: gev2yeim1cjy
                        tpid: ''
                      hex_data: >-
                        17706177656c3535343432373a776f6f686f6f35363331310000f2052a01000000e01f0ad2292fb66200
                    context_free: false
                    elapsed: 1913
                    console: >
                      OWNER:gev2yeim1cjy...Value:7112924518142320608...Key:FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj...hash:18446744073642438656

                      1601134136 INSIDE.   2020   TESTINSIDE.   5000000000

                      fionamefound:

                      Cannot register TPID or FIO Crypto Handle (aka FIO Address) not found. The
                      transaction will continue without TPID payment.
                    trx_id: >-
                      84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                    block_num: 1201721
                    block_time: '2019-09-27T15:28:56.000'
                    producer_block_id: null
                    account_ram_deltas:
                      - account: fio.address
                        delta: 646
                    except: null
                    inline_traces:
                      - receipt:
                          receiver: fio.token
                          response: ''
                          act_digest: >-
                            41051fa782f88f79085466aa9f1aff1f918a69b8a3a82a0554060aaf1e8ea5d2
                          global_sequence: 1212123
                          recv_sequence: 84
                          auth_sequence:
                            - - gev2yeim1cjy
                              - 76
                          code_sequence: 1
                          abi_sequence: 1
                        act:
                          account: fio.token
                          name: transfer
                          authorization:
                            - actor: gev2yeim1cjy
                              permission: active
                          data:
                            from: gev2yeim1cjy
                            to: fio.treasury
                            quantity: 5.000000000 FIO
                            memo: FIO API fees. Thank you.
                          hex_data: >-
                            e01f0ad2292fb662e0afc646dd0ca85b00f2052a010000000946494f000000001846494f2041504920666565732e205468616e6b20796f752e
                        context_free: false
                        elapsed: 129
                        console: ''
                        trx_id: >-
                          84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                        block_num: 1201721
                        block_time: '2019-09-27T15:28:56.000'
                        producer_block_id: null
                        account_ram_deltas: []
                        except: null
                        inline_traces:
                          - receipt:
                              receiver: gev2yeim1cjy
                              response: ''
                              act_digest: >-
                                41051fa782f88f79085466aa9f1aff1f918a69b8a3a82a0554060aaf1e8ea5d2
                              global_sequence: 1212124
                              recv_sequence: 19
                              auth_sequence:
                                - - gev2yeim1cjy
                                  - 77
                              code_sequence: 1
                              abi_sequence: 1
                            act:
                              account: fio.token
                              name: transfer
                              authorization:
                                - actor: gev2yeim1cjy
                                  permission: active
                              data:
                                from: gev2yeim1cjy
                                to: fio.treasury
                                quantity: 5.000000000 FIO
                                memo: FIO API fees. Thank you.
                              hex_data: >-
                                e01f0ad2292fb662e0afc646dd0ca85b00f2052a010000000946494f000000001846494f2041504920666565732e205468616e6b20796f752e
                            context_free: false
                            elapsed: 3
                            console: ''
                            trx_id: >-
                              84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                            block_num: 1201721
                            block_time: '2019-09-27T15:28:56.000'
                            producer_block_id: null
                            account_ram_deltas: []
                            except: null
                            inline_traces: []
                          - receipt:
                              receiver: fio.treasury
                              response: ''
                              act_digest: >-
                                41051fa782f88f79085466aa9f1aff1f918a69b8a3a82a0554060aaf1e8ea5d2
                              global_sequence: 1212125
                              recv_sequence: 113
                              auth_sequence:
                                - - gev2yeim1cjy
                                  - 78
                              code_sequence: 1
                              abi_sequence: 1
                            act:
                              account: fio.token
                              name: transfer
                              authorization:
                                - actor: gev2yeim1cjy
                                  permission: active
                              data:
                                from: gev2yeim1cjy
                                to: fio.treasury
                                quantity: 5.000000000 FIO
                                memo: FIO API fees. Thank you.
                              hex_data: >-
                                e01f0ad2292fb662e0afc646dd0ca85b00f2052a010000000946494f000000001846494f2041504920666565732e205468616e6b20796f752e
                            context_free: false
                            elapsed: 11
                            console: ''
                            trx_id: >-
                              84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                            block_num: 1201721
                            block_time: '2019-09-27T15:28:56.000'
                            producer_block_id: null
                            account_ram_deltas: []
                            except: null
                            inline_traces: []
                      - receipt:
                          receiver: fio.treasury
                          response: ''
                          act_digest: >-
                            1a7775344923ca0ff6340e6c0ae2d246ef2899f908a550741d0cfe02d4ce2c0d
                          global_sequence: 1212126
                          recv_sequence: 114
                          auth_sequence:
                            - - fio.system
                              - 51
                          code_sequence: 1
                          abi_sequence: 1
                        act:
                          account: fio.treasury
                          name: fdtnrwdupdat
                          authorization:
                            - actor: fio.system
                              permission: active
                          data: 00e1f50500000000
                        context_free: false
                        elapsed: 51
                        console: ''
                        trx_id: >-
                          84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                        block_num: 1201721
                        block_time: '2019-09-27T15:28:56.000'
                        producer_block_id: null
                        account_ram_deltas:
                          - account: fio.treasury
                            delta: 0
                        except: null
                        inline_traces: []
                      - receipt:
                          receiver: fio.treasury
                          response: ''
                          act_digest: >-
                            f549782fb7ac5903d111ca2e52dd25599b4220ff6958431da5c493cdc97cefca
                          global_sequence: 1212127
                          recv_sequence: 115
                          auth_sequence:
                            - - fio.system
                              - 52
                          code_sequence: 1
                          abi_sequence: 1
                        act:
                          account: fio.treasury
                          name: bppoolupdate
                          authorization:
                            - actor: fio.system
                              permission: active
                          data: '0011102401000000'
                        context_free: false
                        elapsed: 34
                        console: ''
                        trx_id: >-
                          84409d5141043921be9384cd62ddff80d6e9435273cd5c95f96b6ba19c2137cd
                        block_num: 1201721
                        block_time: '2019-09-27T15:28:56.000'
                        producer_block_id: null
                        account_ram_deltas:
                          - account: fio.treasury
                            delta: 0
                        except: null
                        inline_traces: []
                except: null
      tags:
        - Transactions
  transaction:
    options:
      description: >-
        A transaction instance consists of a transaction header and the list of action instances and transaction
        extensions that make the actual transaction. The transaction header includes information necessary to assess
        the inclusion of the transaction in a block based on its expiration time, which is computed when the transaction is pushed for execution.
        See [Submitting Transactions](/docs/how-to/transactions) for more details.
      summary: Transaction schema
      operationId:
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              expiration:
                type: time_point_sec
                description: The time the transaction must be confirmed by before it expires
              ref_block_num:
                type: uint16_t
                description: Lower 16 bits of a block number
              ref_block_prefix:
                type: uint32_t
                description: Lower 32 bits of block id referred by ref_block_num
              context_free_actions:
                type: array of action
                items:
                  type: action
                description: List of context-free actions if any
              actions:
                type: array of action
                items:
                  type: action
                description: List of action instances
              transaction_extensions:
                type: extensions_type
                description: Extends fields to support additional features
            title: Signed transaction request
            example:
              expiration: 2018-09-04T18:42:49
              ref_block_num: 38096
              ref_block_prefix: 505360011
              actions:
                - account: fio.token
                  name: trnsfiopubky
                  authorization:
                    - actor: "aftyershcu22"
                      permission: "active"
                  data:
                    payee_public_key: "FIO8PRe4WRZJj5mkem6qVGKyvNFgPsNnjNN6kPhh6EaCpzCVin5Jj"
                    amount: 1000000000
                    max_fee: 250000000
                    tpid: "rewards@wallet"
                    actor: "aftyershcu22"
              transaction_extensions:
          description: >-
            This request needs to be packed and signed. See [Packed Transaction Schema](/pages/api/fio-api/#options-packed_transaction) for
            the definition of the object after it has been packed and signed.
      tags:
        - Transactions
  packed_transaction:
    options:
      description: >-
            A packed transaction is a compressed and signed [transaction](/pages/api/fio-api/#options-transaction). Packed transactions minimize space footprint
            and block size in the long run. A packed transaction forms the most generic type of transaction in the FIO blockchain.
      summary: Packed transaction schema
      operationId:
      parameters:
        - in: body
          name: body
          schema:
            type: object
            properties:
              signatures:
                type: array of strings
                items:
                  type: string
                description: Digital signatures after transaction is signed
              compression:
                type: string
                description: Compression method used
              packed_context_free_data:
                type: string
                description: Compressed context-free data (if transaction compressed)
              packed_trx:
                type: string
                description: Compressed transaction (if compressed)
            title: Signed transaction request
            example:
              signatures: >-
                  SIG_K1_KcK1HYTQUmmiivGovvQJdZF4z7zYVuydaKSTUzF2kzzJ4b7YYdhE1WpPxxwfWWXY3uFFxuBUsaBfseviyd5RURn4zbS4no
              compression: none
              packed_context_free_data: ''
              packed_trx: >-
                c32b8e5df85573265d5e0000000001008054197b0ca85b00a6339226aea6ba01e01f0ad2292fb66200000000a8ed3232340b776f6f686f6f353633313100902f500900000017706177656c3336363638383a776f6f686f6f3536333131e01f0ad2292fb66200
          description: >-
            This is a signed and packed transaction that is ready to be sent to a FIO API transaction endpoint (e.g., /push_transaction)

      tags:
        - Transactions
basePath: /v1/chain/
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
components:
  parameters:
    actor:
      type: string
      title: Actor
      description: 'See [Generating actor](/docs/recipes/actor-account)'
definitions:
  error-400:
    type: object
    description: >-
      HTTP code 400 is returned when request was malformed or contained improper
      values. The response body will indicate the name of the incorrect field,
      its type, and the value the service received.
    title: Error 400
    required:
      - type
      - message
      - fields
    properties:
      type:
        type: string
        default: invalid_input
        description: invalid_input
      message:
        type: string
        default: >-
          An invalid request was sent in, please check the nested errors for
          details.
        description: >-
          An invalid request was sent in, please check the nested errors for
          details.
      fields:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: Name of the field which triggered the error
            value:
              type: string
              description: Value which was sent in and which triggered the error
            error:
              type: string
              description: Error message
  tpid:
    type: string
    title: TPID
    description: 'See [Technology Provider ID](/docs/fio-protocol/tpid)'
  actor:
    type: string
    title: Actor
    description: 'See [Generating actor](/docs/recipes/actor-account)'
  fio-address:
    type: string
    title: FIO Crypto Handle (aka FIO Address)
    minLength: 3
    maxLength: 64
    pattern: >-
      ^(?:(?=.{3,64}$)[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))@[a-zA-Z0-9]{1}(?:(?!-{2,}))[a-zA-Z0-9-]*(?:(?<!-))$)
  date-time:
    type: string
    format: date-time
    title: Date/time
  fee-collected:
    title: Fee collected
    description: Amount of SUFs collected as fee
    type: integer
  error-403:
    type: object
    description: >-
      HTTP code 403 is returned when the action is forbidden.


      |type|message|description|

      |---|---|---|

      |invalid_signature|Request signature not valid or not allowed.|Request
      signature is not valid or this user is not allowed to sign this
      transaction. For example, this error will be returned if a user tries to
      add_pub_address on a FIO Crypto Handle (aka FIO Address) they do not own.|

      |invalid_transaction|Signed transactions is not valid or is not formatted
      properly.|Transaction is not properly signed or formatted.|

      |invalid_account_or_action|Provided account or action is not valid for
      this endpoint.|Returned when an attempt is made to pass actions which are
      not associated with a specific endpoint or account.|
    title: Error 403
    properties:
      type:
        type: string
        description: Type of 403 error
        example: invalid_signature
      message:
        type: string
        example: Request signature not valid or not allowed.
        description: Message associated with the 403 type
    required:
      - type
      - message
  error-404:
    type: object
    title: Error 404
    description: >-
      HTTP code 404 is returned when the requested information could not be
      found.
    properties:
      message:
        type: string
        description: Call specific error message.
        example: Public address not found
  fio-domain:
    type: string
    title: FIO Domain
    minLength: 1
    maxLength: 62
    pattern: '^[a-z0-9-]+$'
  signed-request:
    type: object
    properties:
      signatures:
        type: array
        items:
          type: string
      compression:
        type: string
      packed_context_free_data:
        type: string
      packed_trx:
        type: string
    title: Signed transaction request
  signed-response:
    type: object
    properties:
      transaction_id:
        type: string
      processed:
        type: object
        properties:
          id:
            type: string
          block_num:
            type: integer
          block_time:
            type: string
          producer_block_id:
            type: 'null'
          receipt:
            type: object
            properties:
              status:
                type: string
              cpu_usage_us:
                type: integer
              net_usage_words:
                type: integer
          elapsed:
            type: integer
          net_usage:
            type: integer
          scheduled:
            type: boolean
          action_traces:
            type: array
            items:
              type: object
              properties:
                receipt:
                  type: object
                  properties:
                    receiver:
                      type: string
                    response:
                      type: string
                    act_digest:
                      type: string
                    global_sequence:
                      type: integer
                    recv_sequence:
                      type: integer
                    auth_sequence:
                      type: array
                      items:
                        type: integer
                    code_sequence:
                      type: integer
                    abi_sequence:
                      type: integer
                act:
                  type: object
                  properties:
                    account:
                      type: string
                    name:
                      type: string
                    authorization:
                      type: array
                      items:
                        type: object
                        properties:
                          actor:
                            type: string
                          permission:
                            type: string
                    data:
                      type: object
                      properties:
                        fio_domain:
                          type: string
                        owner_fio_public_key:
                          type: string
                        max_fee:
                          type: integer
                        actor:
                          type: string
                        tpid:
                          type: string
                    hex_data:
                      type: string
                context_free:
                  type: boolean
                elapsed:
                  type: integer
                console:
                  type: string
                trx_id:
                  type: string
                block_num:
                  type: integer
                block_time:
                  type: string
                producer_block_id:
                  type: 'null'
                account_ram_deltas:
                  type: array
                  items:
                    type: object
                    properties:
                      account:
                        type: string
                      delta:
                        type: integer
                except:
                  type: 'null'
                inline_traces:
                  type: array
                  items:
                    type: object
                    properties:
                      receipt:
                        type: object
                        properties:
                          receiver:
                            type: string
                          response:
                            type: string
                          act_digest:
                            type: string
                          global_sequence:
                            type: integer
                          recv_sequence:
                            type: integer
                          auth_sequence:
                            type: array
                            items:
                              type: integer
                          code_sequence:
                            type: integer
                          abi_sequence:
                            type: integer
                      act:
                        type: object
                        properties:
                          account:
                            type: string
                          name:
                            type: string
                          authorization:
                            type: array
                            items:
                              type: object
                              properties:
                                actor:
                                  type: string
                                permission:
                                  type: string
                          data:
                            type:
                              - object
                              - string
                            properties:
                              from:
                                type: string
                              to:
                                type: string
                              quantity:
                                type: string
                              memo:
                                type: string
                          hex_data:
                            type: string
                      context_free:
                        type: boolean
                      elapsed:
                        type: integer
                      console:
                        type: string
                      trx_id:
                        type: string
                      block_num:
                        type: integer
                      block_time:
                        type: string
                      producer_block_id:
                        type: 'null'
                      account_ram_deltas:
                        type: array
                        items:
                          type: object
                          properties:
                            account:
                              type: string
                            delta:
                              type: integer
                      except:
                        type: 'null'
                      inline_traces:
                        type: array
                        items:
                          type: object
                          properties:
                            receipt:
                              type: object
                              properties:
                                receiver:
                                  type: string
                                response:
                                  type: string
                                act_digest:
                                  type: string
                                global_sequence:
                                  type: integer
                                recv_sequence:
                                  type: integer
                                auth_sequence:
                                  type: array
                                  items:
                                    type: integer
                                code_sequence:
                                  type: integer
                                abi_sequence:
                                  type: integer
                            act:
                              type: object
                              properties:
                                account:
                                  type: string
                                name:
                                  type: string
                                authorization:
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      actor:
                                        type: string
                                      permission:
                                        type: string
                                data:
                                  type: object
                                  properties:
                                    from:
                                      type: string
                                    to:
                                      type: string
                                    quantity:
                                      type: string
                                    memo:
                                      type: string
                                hex_data:
                                  type: string
                            context_free:
                              type: boolean
                            elapsed:
                              type: integer
                            console:
                              type: string
                            trx_id:
                              type: string
                            block_num:
                              type: integer
                            block_time:
                              type: string
                            producer_block_id:
                              type: 'null'
                            account_ram_deltas:
                              type: array
                              items:
                                type: object
                            except:
                              type: 'null'
                            inline_traces:
                              type: array
                              items:
                                type: object
          except:
            type: 'null'
    title: Signed transaction response
  max-fee:
    type: integer
    title: Max fee
    description: >-
      Maximum amount of SUFs the user is willing to pay for fee. Should be
      preceded by /get_fee for correct value.
  token-code:
    type: string
    title: Token/chain code
    minLength: 1
    maxLength: 10
    pattern: '^[A-Z0-9]+$'
    description: >
      Chain code identifies the blockchain, while token code identifies a token
      on that blockchain. For example: for USDC: chain_code = ETH and token_code
      = USDC, for BTC: chain_code = BTC and token_code = BTC. For list of chain
      codes you can refer to
      [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md)
      and for list of token code refer to the specific blockchain.
  fio-request-ecrypted-content:
    type: object
    title: FIO Request encrypted content
    description: >-
      Certain content inside FIO Request is encrypted and packed into this
      field.


      Min 64 characters

      Max 296 characters


      See [Encrypting FIO Data](/docs/how-to/encryption)
      for more information.
    properties:
      payee_public_address:
        type: object
        properties: {}
        title: Native Blockchain Public Address
        description: "This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.\n\n**Integrated Address**\nIf the blockchain supports it, an integrated address may be passed in just like standard public address. The FIO protocol does not perform validation on the passed string.\n\n**URI Scheme**\nFIO Protocol will support formatting of public addresses using URI were certain attributes are appended to the public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized parameters will be supported in official FIO Protocol SDKs.\n\n**Parameters**\n* dt - Ripple\n* memo - Any - use as generic memo field\n* memo_id -\tStellar\n* memo_text -\tStellar\n* memo_hash -\tStellar\n* memo_return -\tStellar\n* payment_id - Monero\n"
      amount:
        type: string
        description: Amount requested.
      token_code:
        type: string
        title: Token/chain code
        minLength: 1
        maxLength: 10
        pattern: '^[A-Z0-9]+$'
      memo:
        type: string
      hash:
        type: string
      offline_url:
        type: string
      future_use1:
        type: string
      future_use2:
        type: string
      future_use3:
        type: string
      future_use4:
        type: string
      future_use5:
        type: string
    required:
      - payee_public_address
      - amount
      - token_code
      - memo
      - hash
      - offline_url
      - future_use1
      - future_use2
      - future_use3
      - future_use4
      - future_use5
  fio_request-status:
    type: string
    title: FIO Request status
    enum:
      - requested
      - request_rejected
      - sent_to_blockchain
    description: Status of FIO Request
  fio-data-encrypted-content:
    type: object
    title: FIO Data encrypted content
    description: >-
      Certain content inside FIO Data is encrypted and packed into this field.


      Min 64 characters

      Max 432 characters


      See [Encrypting FIO Data](/wallet-integration-guide/encrypting-fio-data)
      for more information.
    properties:
      payer_public_address:
        type: string
        description: Public address on other blockchain of user sending funds.
      payee_public_address:
        type: string
        description: Public address on other blockchain of user receiving funds.
      amount:
        type: string
        description: Amount sent.
      token_code:
        type: string
        title: Token/chain code
        minLength: 1
        maxLength: 10
        pattern: '^[A-Z0-9]+$'
      status:
        type: string
        description: |-
          Status of this OBT. Allowed statuses are:
          * sent_to_blockchain
      obt_id:
        type: string
        description: 'Other Blockchain Transaction ID (OBT ID), i.e Bitcoin transaction ID'
      memo:
        type: string
        description: memo field
      hash:
        type: string
      offline_url:
        type: string
    required:
      - payer_public_address
      - payee_public_address
      - amount
      - token_code
      - status
      - obt_id
      - memo
      - hash
      - offline_url
  fio-public-key:
    type: string
    title: FIO Public Key
    description: Valid WIF Public Key with FIO Prefix
  nbpa:
    type: object
    properties: {}
    title: Native Blockchain Public Address
    description: "This is the public address on another blockchain. Both integrated addresses as well as URI Scheme are supported.\n\n**Integrated Address**\nIf the blockchain supports it, an integrated address may be passed in just like standard public address. The FIO protocol does not perform validation on the passed string.\n\n**URI Scheme**\nFIO Protocol will support formatting of public addresses using URI were certain attributes are appended to the public address following a '?' and delimited with '&'. To allow inter-wallet operability, the following standardized parameters will be supported in official FIO Protocol SDKs.\n\n**Parameters**\n* dt - Ripple\n* memo - Any - use as generic memo field\n* memo_id -\tStellar\n* memo_text -\tStellar\n* memo_hash -\tStellar\n* memo_return -\tStellar\n* payment_id - Monero\n"
  rawTrx:
    type: object
    properties:
      authorization:
        type: array
        items:
          type: object
          properties:
            actor:
              type: string
            permission:
              type: string
      name:
        type: string
      account:
        type: string
      data:
        type: any
responses: {}
parameters: {}
security: []
tags:
  - name: Getters
    description: API endpoints to retrieve data from the FIO blockchain.
  - name: Transactions
    description: Sending transactions to the FIO blockchain
  - name: Actions
    description: 'List of actions to sign for [push_transaction](#post-/push_transaction)'
x-stoplight:
  docs:
    includeDownloadLink: true
